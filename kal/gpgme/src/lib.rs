/* automatically generated by rust-bindgen */


#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

pub type size_t = usize;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed1,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: size_t)
                              -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type off_t = __off_t;
pub type ssize_t = isize;
pub type fpos_t = _G_fpos_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
impl ::std::default::Default for itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum sigevent { }
pub type pid_t = __pid_t;
pub enum __locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::default::Default for __locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
pub type ptrdiff_t = isize;
pub type wchar_t = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpg_err_source_t {
    GPG_ERR_SOURCE_UNKNOWN = 0,
    GPG_ERR_SOURCE_GCRYPT = 1,
    GPG_ERR_SOURCE_GPG = 2,
    GPG_ERR_SOURCE_GPGSM = 3,
    GPG_ERR_SOURCE_GPGAGENT = 4,
    GPG_ERR_SOURCE_PINENTRY = 5,
    GPG_ERR_SOURCE_SCD = 6,
    GPG_ERR_SOURCE_GPGME = 7,
    GPG_ERR_SOURCE_KEYBOX = 8,
    GPG_ERR_SOURCE_KSBA = 9,
    GPG_ERR_SOURCE_DIRMNGR = 10,
    GPG_ERR_SOURCE_GSTI = 11,
    GPG_ERR_SOURCE_GPA = 12,
    GPG_ERR_SOURCE_KLEO = 13,
    GPG_ERR_SOURCE_G13 = 14,
    GPG_ERR_SOURCE_ASSUAN = 15,
    GPG_ERR_SOURCE_TLS = 17,
    GPG_ERR_SOURCE_ANY = 31,
    GPG_ERR_SOURCE_USER_1 = 32,
    GPG_ERR_SOURCE_USER_2 = 33,
    GPG_ERR_SOURCE_USER_3 = 34,
    GPG_ERR_SOURCE_USER_4 = 35,
    GPG_ERR_SOURCE_DIM = 128,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpg_err_code_t {
    GPG_ERR_NO_ERROR = 0,
    GPG_ERR_GENERAL = 1,
    GPG_ERR_UNKNOWN_PACKET = 2,
    GPG_ERR_UNKNOWN_VERSION = 3,
    GPG_ERR_PUBKEY_ALGO = 4,
    GPG_ERR_DIGEST_ALGO = 5,
    GPG_ERR_BAD_PUBKEY = 6,
    GPG_ERR_BAD_SECKEY = 7,
    GPG_ERR_BAD_SIGNATURE = 8,
    GPG_ERR_NO_PUBKEY = 9,
    GPG_ERR_CHECKSUM = 10,
    GPG_ERR_BAD_PASSPHRASE = 11,
    GPG_ERR_CIPHER_ALGO = 12,
    GPG_ERR_KEYRING_OPEN = 13,
    GPG_ERR_INV_PACKET = 14,
    GPG_ERR_INV_ARMOR = 15,
    GPG_ERR_NO_USER_ID = 16,
    GPG_ERR_NO_SECKEY = 17,
    GPG_ERR_WRONG_SECKEY = 18,
    GPG_ERR_BAD_KEY = 19,
    GPG_ERR_COMPR_ALGO = 20,
    GPG_ERR_NO_PRIME = 21,
    GPG_ERR_NO_ENCODING_METHOD = 22,
    GPG_ERR_NO_ENCRYPTION_SCHEME = 23,
    GPG_ERR_NO_SIGNATURE_SCHEME = 24,
    GPG_ERR_INV_ATTR = 25,
    GPG_ERR_NO_VALUE = 26,
    GPG_ERR_NOT_FOUND = 27,
    GPG_ERR_VALUE_NOT_FOUND = 28,
    GPG_ERR_SYNTAX = 29,
    GPG_ERR_BAD_MPI = 30,
    GPG_ERR_INV_PASSPHRASE = 31,
    GPG_ERR_SIG_CLASS = 32,
    GPG_ERR_RESOURCE_LIMIT = 33,
    GPG_ERR_INV_KEYRING = 34,
    GPG_ERR_TRUSTDB = 35,
    GPG_ERR_BAD_CERT = 36,
    GPG_ERR_INV_USER_ID = 37,
    GPG_ERR_UNEXPECTED = 38,
    GPG_ERR_TIME_CONFLICT = 39,
    GPG_ERR_KEYSERVER = 40,
    GPG_ERR_WRONG_PUBKEY_ALGO = 41,
    GPG_ERR_TRIBUTE_TO_D_A = 42,
    GPG_ERR_WEAK_KEY = 43,
    GPG_ERR_INV_KEYLEN = 44,
    GPG_ERR_INV_ARG = 45,
    GPG_ERR_BAD_URI = 46,
    GPG_ERR_INV_URI = 47,
    GPG_ERR_NETWORK = 48,
    GPG_ERR_UNKNOWN_HOST = 49,
    GPG_ERR_SELFTEST_FAILED = 50,
    GPG_ERR_NOT_ENCRYPTED = 51,
    GPG_ERR_NOT_PROCESSED = 52,
    GPG_ERR_UNUSABLE_PUBKEY = 53,
    GPG_ERR_UNUSABLE_SECKEY = 54,
    GPG_ERR_INV_VALUE = 55,
    GPG_ERR_BAD_CERT_CHAIN = 56,
    GPG_ERR_MISSING_CERT = 57,
    GPG_ERR_NO_DATA = 58,
    GPG_ERR_BUG = 59,
    GPG_ERR_NOT_SUPPORTED = 60,
    GPG_ERR_INV_OP = 61,
    GPG_ERR_TIMEOUT = 62,
    GPG_ERR_INTERNAL = 63,
    GPG_ERR_EOF_GCRYPT = 64,
    GPG_ERR_INV_OBJ = 65,
    GPG_ERR_TOO_SHORT = 66,
    GPG_ERR_TOO_LARGE = 67,
    GPG_ERR_NO_OBJ = 68,
    GPG_ERR_NOT_IMPLEMENTED = 69,
    GPG_ERR_CONFLICT = 70,
    GPG_ERR_INV_CIPHER_MODE = 71,
    GPG_ERR_INV_FLAG = 72,
    GPG_ERR_INV_HANDLE = 73,
    GPG_ERR_TRUNCATED = 74,
    GPG_ERR_INCOMPLETE_LINE = 75,
    GPG_ERR_INV_RESPONSE = 76,
    GPG_ERR_NO_AGENT = 77,
    GPG_ERR_AGENT = 78,
    GPG_ERR_INV_DATA = 79,
    GPG_ERR_ASSUAN_SERVER_FAULT = 80,
    GPG_ERR_ASSUAN = 81,
    GPG_ERR_INV_SESSION_KEY = 82,
    GPG_ERR_INV_SEXP = 83,
    GPG_ERR_UNSUPPORTED_ALGORITHM = 84,
    GPG_ERR_NO_PIN_ENTRY = 85,
    GPG_ERR_PIN_ENTRY = 86,
    GPG_ERR_BAD_PIN = 87,
    GPG_ERR_INV_NAME = 88,
    GPG_ERR_BAD_DATA = 89,
    GPG_ERR_INV_PARAMETER = 90,
    GPG_ERR_WRONG_CARD = 91,
    GPG_ERR_NO_DIRMNGR = 92,
    GPG_ERR_DIRMNGR = 93,
    GPG_ERR_CERT_REVOKED = 94,
    GPG_ERR_NO_CRL_KNOWN = 95,
    GPG_ERR_CRL_TOO_OLD = 96,
    GPG_ERR_LINE_TOO_LONG = 97,
    GPG_ERR_NOT_TRUSTED = 98,
    GPG_ERR_CANCELED = 99,
    GPG_ERR_BAD_CA_CERT = 100,
    GPG_ERR_CERT_EXPIRED = 101,
    GPG_ERR_CERT_TOO_YOUNG = 102,
    GPG_ERR_UNSUPPORTED_CERT = 103,
    GPG_ERR_UNKNOWN_SEXP = 104,
    GPG_ERR_UNSUPPORTED_PROTECTION = 105,
    GPG_ERR_CORRUPTED_PROTECTION = 106,
    GPG_ERR_AMBIGUOUS_NAME = 107,
    GPG_ERR_CARD = 108,
    GPG_ERR_CARD_RESET = 109,
    GPG_ERR_CARD_REMOVED = 110,
    GPG_ERR_INV_CARD = 111,
    GPG_ERR_CARD_NOT_PRESENT = 112,
    GPG_ERR_NO_PKCS15_APP = 113,
    GPG_ERR_NOT_CONFIRMED = 114,
    GPG_ERR_CONFIGURATION = 115,
    GPG_ERR_NO_POLICY_MATCH = 116,
    GPG_ERR_INV_INDEX = 117,
    GPG_ERR_INV_ID = 118,
    GPG_ERR_NO_SCDAEMON = 119,
    GPG_ERR_SCDAEMON = 120,
    GPG_ERR_UNSUPPORTED_PROTOCOL = 121,
    GPG_ERR_BAD_PIN_METHOD = 122,
    GPG_ERR_CARD_NOT_INITIALIZED = 123,
    GPG_ERR_UNSUPPORTED_OPERATION = 124,
    GPG_ERR_WRONG_KEY_USAGE = 125,
    GPG_ERR_NOTHING_FOUND = 126,
    GPG_ERR_WRONG_BLOB_TYPE = 127,
    GPG_ERR_MISSING_VALUE = 128,
    GPG_ERR_HARDWARE = 129,
    GPG_ERR_PIN_BLOCKED = 130,
    GPG_ERR_USE_CONDITIONS = 131,
    GPG_ERR_PIN_NOT_SYNCED = 132,
    GPG_ERR_INV_CRL = 133,
    GPG_ERR_BAD_BER = 134,
    GPG_ERR_INV_BER = 135,
    GPG_ERR_ELEMENT_NOT_FOUND = 136,
    GPG_ERR_IDENTIFIER_NOT_FOUND = 137,
    GPG_ERR_INV_TAG = 138,
    GPG_ERR_INV_LENGTH = 139,
    GPG_ERR_INV_KEYINFO = 140,
    GPG_ERR_UNEXPECTED_TAG = 141,
    GPG_ERR_NOT_DER_ENCODED = 142,
    GPG_ERR_NO_CMS_OBJ = 143,
    GPG_ERR_INV_CMS_OBJ = 144,
    GPG_ERR_UNKNOWN_CMS_OBJ = 145,
    GPG_ERR_UNSUPPORTED_CMS_OBJ = 146,
    GPG_ERR_UNSUPPORTED_ENCODING = 147,
    GPG_ERR_UNSUPPORTED_CMS_VERSION = 148,
    GPG_ERR_UNKNOWN_ALGORITHM = 149,
    GPG_ERR_INV_ENGINE = 150,
    GPG_ERR_PUBKEY_NOT_TRUSTED = 151,
    GPG_ERR_DECRYPT_FAILED = 152,
    GPG_ERR_KEY_EXPIRED = 153,
    GPG_ERR_SIG_EXPIRED = 154,
    GPG_ERR_ENCODING_PROBLEM = 155,
    GPG_ERR_INV_STATE = 156,
    GPG_ERR_DUP_VALUE = 157,
    GPG_ERR_MISSING_ACTION = 158,
    GPG_ERR_MODULE_NOT_FOUND = 159,
    GPG_ERR_INV_OID_STRING = 160,
    GPG_ERR_INV_TIME = 161,
    GPG_ERR_INV_CRL_OBJ = 162,
    GPG_ERR_UNSUPPORTED_CRL_VERSION = 163,
    GPG_ERR_INV_CERT_OBJ = 164,
    GPG_ERR_UNKNOWN_NAME = 165,
    GPG_ERR_LOCALE_PROBLEM = 166,
    GPG_ERR_NOT_LOCKED = 167,
    GPG_ERR_PROTOCOL_VIOLATION = 168,
    GPG_ERR_INV_MAC = 169,
    GPG_ERR_INV_REQUEST = 170,
    GPG_ERR_UNKNOWN_EXTN = 171,
    GPG_ERR_UNKNOWN_CRIT_EXTN = 172,
    GPG_ERR_LOCKED = 173,
    GPG_ERR_UNKNOWN_OPTION = 174,
    GPG_ERR_UNKNOWN_COMMAND = 175,
    GPG_ERR_NOT_OPERATIONAL = 176,
    GPG_ERR_NO_PASSPHRASE = 177,
    GPG_ERR_NO_PIN = 178,
    GPG_ERR_NOT_ENABLED = 179,
    GPG_ERR_NO_ENGINE = 180,
    GPG_ERR_MISSING_KEY = 181,
    GPG_ERR_TOO_MANY = 182,
    GPG_ERR_LIMIT_REACHED = 183,
    GPG_ERR_NOT_INITIALIZED = 184,
    GPG_ERR_MISSING_ISSUER_CERT = 185,
    GPG_ERR_NO_KEYSERVER = 186,
    GPG_ERR_INV_CURVE = 187,
    GPG_ERR_UNKNOWN_CURVE = 188,
    GPG_ERR_DUP_KEY = 189,
    GPG_ERR_AMBIGUOUS = 190,
    GPG_ERR_NO_CRYPT_CTX = 191,
    GPG_ERR_WRONG_CRYPT_CTX = 192,
    GPG_ERR_BAD_CRYPT_CTX = 193,
    GPG_ERR_CRYPT_CTX_CONFLICT = 194,
    GPG_ERR_BROKEN_PUBKEY = 195,
    GPG_ERR_BROKEN_SECKEY = 196,
    GPG_ERR_MAC_ALGO = 197,
    GPG_ERR_FULLY_CANCELED = 198,
    GPG_ERR_UNFINISHED = 199,
    GPG_ERR_BUFFER_TOO_SHORT = 200,
    GPG_ERR_SEXP_INV_LEN_SPEC = 201,
    GPG_ERR_SEXP_STRING_TOO_LONG = 202,
    GPG_ERR_SEXP_UNMATCHED_PAREN = 203,
    GPG_ERR_SEXP_NOT_CANONICAL = 204,
    GPG_ERR_SEXP_BAD_CHARACTER = 205,
    GPG_ERR_SEXP_BAD_QUOTATION = 206,
    GPG_ERR_SEXP_ZERO_PREFIX = 207,
    GPG_ERR_SEXP_NESTED_DH = 208,
    GPG_ERR_SEXP_UNMATCHED_DH = 209,
    GPG_ERR_SEXP_UNEXPECTED_PUNC = 210,
    GPG_ERR_SEXP_BAD_HEX_CHAR = 211,
    GPG_ERR_SEXP_ODD_HEX_NUMBERS = 212,
    GPG_ERR_SEXP_BAD_OCT_CHAR = 213,
    GPG_ERR_NO_CERT_CHAIN = 226,
    GPG_ERR_CERT_TOO_LARGE = 227,
    GPG_ERR_INV_RECORD = 228,
    GPG_ERR_BAD_MAC = 229,
    GPG_ERR_UNEXPECTED_MSG = 230,
    GPG_ERR_COMPR_FAILED = 231,
    GPG_ERR_WOULD_WRAP = 232,
    GPG_ERR_FATAL_ALERT = 233,
    GPG_ERR_NO_CIPHER = 234,
    GPG_ERR_MISSING_CLIENT_CERT = 235,
    GPG_ERR_CLOSE_NOTIFY = 236,
    GPG_ERR_TICKET_EXPIRED = 237,
    GPG_ERR_BAD_TICKET = 238,
    GPG_ERR_UNKNOWN_IDENTITY = 239,
    GPG_ERR_BAD_HS_CERT = 240,
    GPG_ERR_BAD_HS_CERT_REQ = 241,
    GPG_ERR_BAD_HS_CERT_VER = 242,
    GPG_ERR_BAD_HS_CHANGE_CIPHER = 243,
    GPG_ERR_BAD_HS_CLIENT_HELLO = 244,
    GPG_ERR_BAD_HS_SERVER_HELLO = 245,
    GPG_ERR_BAD_HS_SERVER_HELLO_DONE = 246,
    GPG_ERR_BAD_HS_FINISHED = 247,
    GPG_ERR_BAD_HS_SERVER_KEX = 248,
    GPG_ERR_BAD_HS_CLIENT_KEX = 249,
    GPG_ERR_BOGUS_STRING = 250,
    GPG_ERR_KEY_DISABLED = 252,
    GPG_ERR_KEY_ON_CARD = 253,
    GPG_ERR_INV_LOCK_OBJ = 254,
    GPG_ERR_ASS_GENERAL = 257,
    GPG_ERR_ASS_ACCEPT_FAILED = 258,
    GPG_ERR_ASS_CONNECT_FAILED = 259,
    GPG_ERR_ASS_INV_RESPONSE = 260,
    GPG_ERR_ASS_INV_VALUE = 261,
    GPG_ERR_ASS_INCOMPLETE_LINE = 262,
    GPG_ERR_ASS_LINE_TOO_LONG = 263,
    GPG_ERR_ASS_NESTED_COMMANDS = 264,
    GPG_ERR_ASS_NO_DATA_CB = 265,
    GPG_ERR_ASS_NO_INQUIRE_CB = 266,
    GPG_ERR_ASS_NOT_A_SERVER = 267,
    GPG_ERR_ASS_NOT_A_CLIENT = 268,
    GPG_ERR_ASS_SERVER_START = 269,
    GPG_ERR_ASS_READ_ERROR = 270,
    GPG_ERR_ASS_WRITE_ERROR = 271,
    GPG_ERR_ASS_TOO_MUCH_DATA = 273,
    GPG_ERR_ASS_UNEXPECTED_CMD = 274,
    GPG_ERR_ASS_UNKNOWN_CMD = 275,
    GPG_ERR_ASS_SYNTAX = 276,
    GPG_ERR_ASS_CANCELED = 277,
    GPG_ERR_ASS_NO_INPUT = 278,
    GPG_ERR_ASS_NO_OUTPUT = 279,
    GPG_ERR_ASS_PARAMETER = 280,
    GPG_ERR_ASS_UNKNOWN_INQUIRE = 281,
    GPG_ERR_USER_1 = 1024,
    GPG_ERR_USER_2 = 1025,
    GPG_ERR_USER_3 = 1026,
    GPG_ERR_USER_4 = 1027,
    GPG_ERR_USER_5 = 1028,
    GPG_ERR_USER_6 = 1029,
    GPG_ERR_USER_7 = 1030,
    GPG_ERR_USER_8 = 1031,
    GPG_ERR_USER_9 = 1032,
    GPG_ERR_USER_10 = 1033,
    GPG_ERR_USER_11 = 1034,
    GPG_ERR_USER_12 = 1035,
    GPG_ERR_USER_13 = 1036,
    GPG_ERR_USER_14 = 1037,
    GPG_ERR_USER_15 = 1038,
    GPG_ERR_USER_16 = 1039,
    GPG_ERR_MISSING_ERRNO = 16381,
    GPG_ERR_UNKNOWN_ERRNO = 16382,
    GPG_ERR_EOF = 16383,
    GPG_ERR_E2BIG = 32768,
    GPG_ERR_EACCES = 32769,
    GPG_ERR_EADDRINUSE = 32770,
    GPG_ERR_EADDRNOTAVAIL = 32771,
    GPG_ERR_EADV = 32772,
    GPG_ERR_EAFNOSUPPORT = 32773,
    GPG_ERR_EAGAIN = 32774,
    GPG_ERR_EALREADY = 32775,
    GPG_ERR_EAUTH = 32776,
    GPG_ERR_EBACKGROUND = 32777,
    GPG_ERR_EBADE = 32778,
    GPG_ERR_EBADF = 32779,
    GPG_ERR_EBADFD = 32780,
    GPG_ERR_EBADMSG = 32781,
    GPG_ERR_EBADR = 32782,
    GPG_ERR_EBADRPC = 32783,
    GPG_ERR_EBADRQC = 32784,
    GPG_ERR_EBADSLT = 32785,
    GPG_ERR_EBFONT = 32786,
    GPG_ERR_EBUSY = 32787,
    GPG_ERR_ECANCELED = 32788,
    GPG_ERR_ECHILD = 32789,
    GPG_ERR_ECHRNG = 32790,
    GPG_ERR_ECOMM = 32791,
    GPG_ERR_ECONNABORTED = 32792,
    GPG_ERR_ECONNREFUSED = 32793,
    GPG_ERR_ECONNRESET = 32794,
    GPG_ERR_ED = 32795,
    GPG_ERR_EDEADLK = 32796,
    GPG_ERR_EDEADLOCK = 32797,
    GPG_ERR_EDESTADDRREQ = 32798,
    GPG_ERR_EDIED = 32799,
    GPG_ERR_EDOM = 32800,
    GPG_ERR_EDOTDOT = 32801,
    GPG_ERR_EDQUOT = 32802,
    GPG_ERR_EEXIST = 32803,
    GPG_ERR_EFAULT = 32804,
    GPG_ERR_EFBIG = 32805,
    GPG_ERR_EFTYPE = 32806,
    GPG_ERR_EGRATUITOUS = 32807,
    GPG_ERR_EGREGIOUS = 32808,
    GPG_ERR_EHOSTDOWN = 32809,
    GPG_ERR_EHOSTUNREACH = 32810,
    GPG_ERR_EIDRM = 32811,
    GPG_ERR_EIEIO = 32812,
    GPG_ERR_EILSEQ = 32813,
    GPG_ERR_EINPROGRESS = 32814,
    GPG_ERR_EINTR = 32815,
    GPG_ERR_EINVAL = 32816,
    GPG_ERR_EIO = 32817,
    GPG_ERR_EISCONN = 32818,
    GPG_ERR_EISDIR = 32819,
    GPG_ERR_EISNAM = 32820,
    GPG_ERR_EL2HLT = 32821,
    GPG_ERR_EL2NSYNC = 32822,
    GPG_ERR_EL3HLT = 32823,
    GPG_ERR_EL3RST = 32824,
    GPG_ERR_ELIBACC = 32825,
    GPG_ERR_ELIBBAD = 32826,
    GPG_ERR_ELIBEXEC = 32827,
    GPG_ERR_ELIBMAX = 32828,
    GPG_ERR_ELIBSCN = 32829,
    GPG_ERR_ELNRNG = 32830,
    GPG_ERR_ELOOP = 32831,
    GPG_ERR_EMEDIUMTYPE = 32832,
    GPG_ERR_EMFILE = 32833,
    GPG_ERR_EMLINK = 32834,
    GPG_ERR_EMSGSIZE = 32835,
    GPG_ERR_EMULTIHOP = 32836,
    GPG_ERR_ENAMETOOLONG = 32837,
    GPG_ERR_ENAVAIL = 32838,
    GPG_ERR_ENEEDAUTH = 32839,
    GPG_ERR_ENETDOWN = 32840,
    GPG_ERR_ENETRESET = 32841,
    GPG_ERR_ENETUNREACH = 32842,
    GPG_ERR_ENFILE = 32843,
    GPG_ERR_ENOANO = 32844,
    GPG_ERR_ENOBUFS = 32845,
    GPG_ERR_ENOCSI = 32846,
    GPG_ERR_ENODATA = 32847,
    GPG_ERR_ENODEV = 32848,
    GPG_ERR_ENOENT = 32849,
    GPG_ERR_ENOEXEC = 32850,
    GPG_ERR_ENOLCK = 32851,
    GPG_ERR_ENOLINK = 32852,
    GPG_ERR_ENOMEDIUM = 32853,
    GPG_ERR_ENOMEM = 32854,
    GPG_ERR_ENOMSG = 32855,
    GPG_ERR_ENONET = 32856,
    GPG_ERR_ENOPKG = 32857,
    GPG_ERR_ENOPROTOOPT = 32858,
    GPG_ERR_ENOSPC = 32859,
    GPG_ERR_ENOSR = 32860,
    GPG_ERR_ENOSTR = 32861,
    GPG_ERR_ENOSYS = 32862,
    GPG_ERR_ENOTBLK = 32863,
    GPG_ERR_ENOTCONN = 32864,
    GPG_ERR_ENOTDIR = 32865,
    GPG_ERR_ENOTEMPTY = 32866,
    GPG_ERR_ENOTNAM = 32867,
    GPG_ERR_ENOTSOCK = 32868,
    GPG_ERR_ENOTSUP = 32869,
    GPG_ERR_ENOTTY = 32870,
    GPG_ERR_ENOTUNIQ = 32871,
    GPG_ERR_ENXIO = 32872,
    GPG_ERR_EOPNOTSUPP = 32873,
    GPG_ERR_EOVERFLOW = 32874,
    GPG_ERR_EPERM = 32875,
    GPG_ERR_EPFNOSUPPORT = 32876,
    GPG_ERR_EPIPE = 32877,
    GPG_ERR_EPROCLIM = 32878,
    GPG_ERR_EPROCUNAVAIL = 32879,
    GPG_ERR_EPROGMISMATCH = 32880,
    GPG_ERR_EPROGUNAVAIL = 32881,
    GPG_ERR_EPROTO = 32882,
    GPG_ERR_EPROTONOSUPPORT = 32883,
    GPG_ERR_EPROTOTYPE = 32884,
    GPG_ERR_ERANGE = 32885,
    GPG_ERR_EREMCHG = 32886,
    GPG_ERR_EREMOTE = 32887,
    GPG_ERR_EREMOTEIO = 32888,
    GPG_ERR_ERESTART = 32889,
    GPG_ERR_EROFS = 32890,
    GPG_ERR_ERPCMISMATCH = 32891,
    GPG_ERR_ESHUTDOWN = 32892,
    GPG_ERR_ESOCKTNOSUPPORT = 32893,
    GPG_ERR_ESPIPE = 32894,
    GPG_ERR_ESRCH = 32895,
    GPG_ERR_ESRMNT = 32896,
    GPG_ERR_ESTALE = 32897,
    GPG_ERR_ESTRPIPE = 32898,
    GPG_ERR_ETIME = 32899,
    GPG_ERR_ETIMEDOUT = 32900,
    GPG_ERR_ETOOMANYREFS = 32901,
    GPG_ERR_ETXTBSY = 32902,
    GPG_ERR_EUCLEAN = 32903,
    GPG_ERR_EUNATCH = 32904,
    GPG_ERR_EUSERS = 32905,
    GPG_ERR_EWOULDBLOCK = 32906,
    GPG_ERR_EXDEV = 32907,
    GPG_ERR_EXFULL = 32908,
    GPG_ERR_CODE_DIM = 65536,
}
pub type gpg_error_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed3 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_ssize_t = ssize_t;
pub type gpgrt_off_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct gpgrt_lock_t {
    pub _vers: ::std::os::raw::c_long,
    pub u: Union_Unnamed4,
}
impl ::std::clone::Clone for gpgrt_lock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for gpgrt_lock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed4 {
    pub unsafe fn _priv(&mut self) -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _x_align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _xp_align(&mut self) -> *mut *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _gpgrt_stream_internal { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgrt__stream {
    pub flags: Struct_Unnamed5,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub buffer_size: size_t,
    pub data_len: size_t,
    pub data_offset: size_t,
    pub data_flushed: size_t,
    pub unread_buffer: *mut ::std::os::raw::c_uchar,
    pub unread_buffer_size: size_t,
    pub unread_data_len: size_t,
    pub intern: *mut _gpgrt_stream_internal,
}
impl ::std::default::Default for _gpgrt__stream {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed5 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_stream_t = *mut _gpgrt__stream;
pub type gpgrt_cookie_read_function_t =
    ::std::option::Option<unsafe extern "C" fn(cookie:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *mut ::std::os::raw::c_void,
                                               size: size_t) -> ssize_t>;
pub type gpgrt_cookie_write_function_t =
    ::std::option::Option<unsafe extern "C" fn(cookie:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *const ::std::os::raw::c_void,
                                               size: size_t) -> ssize_t>;
pub type gpgrt_cookie_seek_function_t =
    ::std::option::Option<unsafe extern "C" fn(cookie:
                                                   *mut ::std::os::raw::c_void,
                                               pos: *mut gpgrt_off_t,
                                               whence: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type gpgrt_cookie_close_function_t =
    ::std::option::Option<unsafe extern "C" fn(cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgrt_cookie_io_functions {
    pub func_read: gpgrt_cookie_read_function_t,
    pub func_write: gpgrt_cookie_write_function_t,
    pub func_seek: gpgrt_cookie_seek_function_t,
    pub func_close: gpgrt_cookie_close_function_t,
}
impl ::std::default::Default for _gpgrt_cookie_io_functions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_cookie_io_functions_t = _gpgrt_cookie_io_functions;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgrt_syshd_types {
    GPGRT_SYSHD_NONE = 0,
    GPGRT_SYSHD_FD = 1,
    GPGRT_SYSHD_SOCK = 2,
    GPGRT_SYSHD_RVID = 3,
    GPGRT_SYSHD_HANDLE = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgrt_syshd {
    pub type_: gpgrt_syshd_types,
    pub u: Union_Unnamed6,
}
impl ::std::default::Default for _gpgrt_syshd {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed6 {
    pub unsafe fn fd(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sock(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rvid(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn handle(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_syshd_t = _gpgrt_syshd;
pub type gpgme_off_t = off_t;
pub type gpgme_ssize_t = ssize_t;
pub enum gpgme_context { }
pub type gpgme_ctx_t = *mut gpgme_context;
pub enum gpgme_data { }
pub type gpgme_data_t = *mut gpgme_data;
pub type gpgme_error_t = gpg_error_t;
pub type gpgme_err_code_t = gpg_err_code_t;
pub type gpgme_err_source_t = gpg_err_source_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_data_encoding_t {
    GPGME_DATA_ENCODING_NONE = 0,
    GPGME_DATA_ENCODING_BINARY = 1,
    GPGME_DATA_ENCODING_BASE64 = 2,
    GPGME_DATA_ENCODING_ARMOR = 3,
    GPGME_DATA_ENCODING_URL = 4,
    GPGME_DATA_ENCODING_URLESC = 5,
    GPGME_DATA_ENCODING_URL0 = 6,
    GPGME_DATA_ENCODING_MIME = 7,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_data_type_t {
    GPGME_DATA_TYPE_INVALID = 0,
    GPGME_DATA_TYPE_UNKNOWN = 1,
    GPGME_DATA_TYPE_PGP_SIGNED = 16,
    GPGME_DATA_TYPE_PGP_ENCRYPTED = 17,
    GPGME_DATA_TYPE_PGP_OTHER = 18,
    GPGME_DATA_TYPE_PGP_KEY = 19,
    GPGME_DATA_TYPE_PGP_SIGNATURE = 24,
    GPGME_DATA_TYPE_CMS_SIGNED = 32,
    GPGME_DATA_TYPE_CMS_ENCRYPTED = 33,
    GPGME_DATA_TYPE_CMS_OTHER = 34,
    GPGME_DATA_TYPE_X509_CERT = 35,
    GPGME_DATA_TYPE_PKCS12 = 36,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_pubkey_algo_t {
    GPGME_PK_RSA = 1,
    GPGME_PK_RSA_E = 2,
    GPGME_PK_RSA_S = 3,
    GPGME_PK_ELG_E = 16,
    GPGME_PK_DSA = 17,
    GPGME_PK_ECC = 18,
    GPGME_PK_ELG = 20,
    GPGME_PK_ECDSA = 301,
    GPGME_PK_ECDH = 302,
    GPGME_PK_EDDSA = 303,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_hash_algo_t {
    GPGME_MD_NONE = 0,
    GPGME_MD_MD5 = 1,
    GPGME_MD_SHA1 = 2,
    GPGME_MD_RMD160 = 3,
    GPGME_MD_MD2 = 5,
    GPGME_MD_TIGER = 6,
    GPGME_MD_HAVAL = 7,
    GPGME_MD_SHA256 = 8,
    GPGME_MD_SHA384 = 9,
    GPGME_MD_SHA512 = 10,
    GPGME_MD_SHA224 = 11,
    GPGME_MD_MD4 = 301,
    GPGME_MD_CRC32 = 302,
    GPGME_MD_CRC32_RFC1510 = 303,
    GPGME_MD_CRC24_RFC2440 = 304,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _gpgme_sig_stat_t {
    GPGME_SIG_STAT_NONE = 0,
    GPGME_SIG_STAT_GOOD = 1,
    GPGME_SIG_STAT_BAD = 2,
    GPGME_SIG_STAT_NOKEY = 3,
    GPGME_SIG_STAT_NOSIG = 4,
    GPGME_SIG_STAT_ERROR = 5,
    GPGME_SIG_STAT_DIFF = 6,
    GPGME_SIG_STAT_GOOD_EXP = 7,
    GPGME_SIG_STAT_GOOD_EXPKEY = 8,
}
pub type gpgme_sig_stat_t = _gpgme_sig_stat_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_sig_mode_t {
    GPGME_SIG_MODE_NORMAL = 0,
    GPGME_SIG_MODE_DETACH = 1,
    GPGME_SIG_MODE_CLEAR = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _gpgme_attr_t {
    GPGME_ATTR_KEYID = 1,
    GPGME_ATTR_FPR = 2,
    GPGME_ATTR_ALGO = 3,
    GPGME_ATTR_LEN = 4,
    GPGME_ATTR_CREATED = 5,
    GPGME_ATTR_EXPIRE = 6,
    GPGME_ATTR_OTRUST = 7,
    GPGME_ATTR_USERID = 8,
    GPGME_ATTR_NAME = 9,
    GPGME_ATTR_EMAIL = 10,
    GPGME_ATTR_COMMENT = 11,
    GPGME_ATTR_VALIDITY = 12,
    GPGME_ATTR_LEVEL = 13,
    GPGME_ATTR_TYPE = 14,
    GPGME_ATTR_IS_SECRET = 15,
    GPGME_ATTR_KEY_REVOKED = 16,
    GPGME_ATTR_KEY_INVALID = 17,
    GPGME_ATTR_UID_REVOKED = 18,
    GPGME_ATTR_UID_INVALID = 19,
    GPGME_ATTR_KEY_CAPS = 20,
    GPGME_ATTR_CAN_ENCRYPT = 21,
    GPGME_ATTR_CAN_SIGN = 22,
    GPGME_ATTR_CAN_CERTIFY = 23,
    GPGME_ATTR_KEY_EXPIRED = 24,
    GPGME_ATTR_KEY_DISABLED = 25,
    GPGME_ATTR_SERIAL = 26,
    GPGME_ATTR_ISSUER = 27,
    GPGME_ATTR_CHAINID = 28,
    GPGME_ATTR_SIG_STATUS = 29,
    GPGME_ATTR_ERRTOK = 30,
    GPGME_ATTR_SIG_SUMMARY = 31,
    GPGME_ATTR_SIG_CLASS = 32,
}
pub type gpgme_attr_t = _gpgme_attr_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_validity_t {
    GPGME_VALIDITY_UNKNOWN = 0,
    GPGME_VALIDITY_UNDEFINED = 1,
    GPGME_VALIDITY_NEVER = 2,
    GPGME_VALIDITY_MARGINAL = 3,
    GPGME_VALIDITY_FULL = 4,
    GPGME_VALIDITY_ULTIMATE = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_tofu_policy_t {
    GPGME_TOFU_POLICY_NONE = 0,
    GPGME_TOFU_POLICY_AUTO = 1,
    GPGME_TOFU_POLICY_GOOD = 2,
    GPGME_TOFU_POLICY_UNKNOWN = 3,
    GPGME_TOFU_POLICY_BAD = 4,
    GPGME_TOFU_POLICY_ASK = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_protocol_t {
    GPGME_PROTOCOL_OpenPGP = 0,
    GPGME_PROTOCOL_CMS = 1,
    GPGME_PROTOCOL_GPGCONF = 2,
    GPGME_PROTOCOL_ASSUAN = 3,
    GPGME_PROTOCOL_G13 = 4,
    GPGME_PROTOCOL_UISERVER = 5,
    GPGME_PROTOCOL_SPAWN = 6,
    GPGME_PROTOCOL_DEFAULT = 254,
    GPGME_PROTOCOL_UNKNOWN = 255,
}
pub type gpgme_keylist_mode_t = ::std::os::raw::c_uint;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_pinentry_mode_t {
    GPGME_PINENTRY_MODE_DEFAULT = 0,
    GPGME_PINENTRY_MODE_ASK = 1,
    GPGME_PINENTRY_MODE_CANCEL = 2,
    GPGME_PINENTRY_MODE_ERROR = 3,
    GPGME_PINENTRY_MODE_LOOPBACK = 4,
}
pub type gpgme_export_mode_t = ::std::os::raw::c_uint;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_status_code_t {
    GPGME_STATUS_EOF = 0,
    GPGME_STATUS_ENTER = 1,
    GPGME_STATUS_LEAVE = 2,
    GPGME_STATUS_ABORT = 3,
    GPGME_STATUS_GOODSIG = 4,
    GPGME_STATUS_BADSIG = 5,
    GPGME_STATUS_ERRSIG = 6,
    GPGME_STATUS_BADARMOR = 7,
    GPGME_STATUS_RSA_OR_IDEA = 8,
    GPGME_STATUS_KEYEXPIRED = 9,
    GPGME_STATUS_KEYREVOKED = 10,
    GPGME_STATUS_TRUST_UNDEFINED = 11,
    GPGME_STATUS_TRUST_NEVER = 12,
    GPGME_STATUS_TRUST_MARGINAL = 13,
    GPGME_STATUS_TRUST_FULLY = 14,
    GPGME_STATUS_TRUST_ULTIMATE = 15,
    GPGME_STATUS_SHM_INFO = 16,
    GPGME_STATUS_SHM_GET = 17,
    GPGME_STATUS_SHM_GET_BOOL = 18,
    GPGME_STATUS_SHM_GET_HIDDEN = 19,
    GPGME_STATUS_NEED_PASSPHRASE = 20,
    GPGME_STATUS_VALIDSIG = 21,
    GPGME_STATUS_SIG_ID = 22,
    GPGME_STATUS_ENC_TO = 23,
    GPGME_STATUS_NODATA = 24,
    GPGME_STATUS_BAD_PASSPHRASE = 25,
    GPGME_STATUS_NO_PUBKEY = 26,
    GPGME_STATUS_NO_SECKEY = 27,
    GPGME_STATUS_NEED_PASSPHRASE_SYM = 28,
    GPGME_STATUS_DECRYPTION_FAILED = 29,
    GPGME_STATUS_DECRYPTION_OKAY = 30,
    GPGME_STATUS_MISSING_PASSPHRASE = 31,
    GPGME_STATUS_GOOD_PASSPHRASE = 32,
    GPGME_STATUS_GOODMDC = 33,
    GPGME_STATUS_BADMDC = 34,
    GPGME_STATUS_ERRMDC = 35,
    GPGME_STATUS_IMPORTED = 36,
    GPGME_STATUS_IMPORT_OK = 37,
    GPGME_STATUS_IMPORT_PROBLEM = 38,
    GPGME_STATUS_IMPORT_RES = 39,
    GPGME_STATUS_FILE_START = 40,
    GPGME_STATUS_FILE_DONE = 41,
    GPGME_STATUS_FILE_ERROR = 42,
    GPGME_STATUS_BEGIN_DECRYPTION = 43,
    GPGME_STATUS_END_DECRYPTION = 44,
    GPGME_STATUS_BEGIN_ENCRYPTION = 45,
    GPGME_STATUS_END_ENCRYPTION = 46,
    GPGME_STATUS_DELETE_PROBLEM = 47,
    GPGME_STATUS_GET_BOOL = 48,
    GPGME_STATUS_GET_LINE = 49,
    GPGME_STATUS_GET_HIDDEN = 50,
    GPGME_STATUS_GOT_IT = 51,
    GPGME_STATUS_PROGRESS = 52,
    GPGME_STATUS_SIG_CREATED = 53,
    GPGME_STATUS_SESSION_KEY = 54,
    GPGME_STATUS_NOTATION_NAME = 55,
    GPGME_STATUS_NOTATION_DATA = 56,
    GPGME_STATUS_POLICY_URL = 57,
    GPGME_STATUS_BEGIN_STREAM = 58,
    GPGME_STATUS_END_STREAM = 59,
    GPGME_STATUS_KEY_CREATED = 60,
    GPGME_STATUS_USERID_HINT = 61,
    GPGME_STATUS_UNEXPECTED = 62,
    GPGME_STATUS_INV_RECP = 63,
    GPGME_STATUS_NO_RECP = 64,
    GPGME_STATUS_ALREADY_SIGNED = 65,
    GPGME_STATUS_SIGEXPIRED = 66,
    GPGME_STATUS_EXPSIG = 67,
    GPGME_STATUS_EXPKEYSIG = 68,
    GPGME_STATUS_TRUNCATED = 69,
    GPGME_STATUS_ERROR = 70,
    GPGME_STATUS_NEWSIG = 71,
    GPGME_STATUS_REVKEYSIG = 72,
    GPGME_STATUS_SIG_SUBPACKET = 73,
    GPGME_STATUS_NEED_PASSPHRASE_PIN = 74,
    GPGME_STATUS_SC_OP_FAILURE = 75,
    GPGME_STATUS_SC_OP_SUCCESS = 76,
    GPGME_STATUS_CARDCTRL = 77,
    GPGME_STATUS_BACKUP_KEY_CREATED = 78,
    GPGME_STATUS_PKA_TRUST_BAD = 79,
    GPGME_STATUS_PKA_TRUST_GOOD = 80,
    GPGME_STATUS_PLAINTEXT = 81,
    GPGME_STATUS_INV_SGNR = 82,
    GPGME_STATUS_NO_SGNR = 83,
    GPGME_STATUS_SUCCESS = 84,
    GPGME_STATUS_DECRYPTION_INFO = 85,
    GPGME_STATUS_PLAINTEXT_LENGTH = 86,
    GPGME_STATUS_MOUNTPOINT = 87,
    GPGME_STATUS_PINENTRY_LAUNCHED = 88,
    GPGME_STATUS_ATTRIBUTE = 89,
    GPGME_STATUS_BEGIN_SIGNING = 90,
    GPGME_STATUS_KEY_NOT_CREATED = 91,
    GPGME_STATUS_INQUIRE_MAXLEN = 92,
    GPGME_STATUS_FAILURE = 93,
    GPGME_STATUS_KEY_CONSIDERED = 94,
    GPGME_STATUS_TOFU_USER = 95,
    GPGME_STATUS_TOFU_STATS = 96,
    GPGME_STATUS_TOFU_STATS_LONG = 97,
    GPGME_STATUS_NOTATION_FLAGS = 98,
}
pub type gpgme_sig_notation_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_sig_notation {
    pub next: *mut _gpgme_sig_notation,
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub name_len: ::std::os::raw::c_int,
    pub value_len: ::std::os::raw::c_int,
    pub flags: gpgme_sig_notation_flags_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: ::std::os::raw::c_int,
}
impl ::std::default::Default for _gpgme_sig_notation {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_sig_notation_t = *mut _gpgme_sig_notation;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_engine_info {
    pub next: *mut _gpgme_engine_info,
    pub protocol: gpgme_protocol_t,
    pub file_name: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub req_version: *const ::std::os::raw::c_char,
    pub home_dir: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _gpgme_engine_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_engine_info_t = *mut _gpgme_engine_info;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_tofu_info {
    pub next: *mut _gpgme_tofu_info,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub signcount: ::std::os::raw::c_ushort,
    pub encrcount: ::std::os::raw::c_ushort,
    pub signfirst: ::std::os::raw::c_ulong,
    pub signlast: ::std::os::raw::c_ulong,
    pub encrfirst: ::std::os::raw::c_ulong,
    pub encrlast: ::std::os::raw::c_ulong,
    pub description: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _gpgme_tofu_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_tofu_info_t = *mut _gpgme_tofu_info;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_subkey {
    pub next: *mut _gpgme_subkey,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub pubkey_algo: gpgme_pubkey_algo_t,
    pub length: ::std::os::raw::c_uint,
    pub keyid: *mut ::std::os::raw::c_char,
    pub _keyid: [::std::os::raw::c_char; 17usize],
    pub fpr: *mut ::std::os::raw::c_char,
    pub timestamp: ::std::os::raw::c_long,
    pub expires: ::std::os::raw::c_long,
    pub card_number: *mut ::std::os::raw::c_char,
    pub curve: *mut ::std::os::raw::c_char,
    pub keygrip: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _gpgme_subkey {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_subkey_t = *mut _gpgme_subkey;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_key_sig {
    pub next: *mut _gpgme_key_sig,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub pubkey_algo: gpgme_pubkey_algo_t,
    pub keyid: *mut ::std::os::raw::c_char,
    pub _keyid: [::std::os::raw::c_char; 17usize],
    pub timestamp: ::std::os::raw::c_long,
    pub expires: ::std::os::raw::c_long,
    pub status: gpgme_error_t,
    pub class: ::std::os::raw::c_uint,
    pub uid: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub email: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub sig_class: ::std::os::raw::c_uint,
    pub notations: gpgme_sig_notation_t,
    pub _last_notation: gpgme_sig_notation_t,
}
impl ::std::default::Default for _gpgme_key_sig {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_key_sig_t = *mut _gpgme_key_sig;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_user_id {
    pub next: *mut _gpgme_user_id,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub validity: gpgme_validity_t,
    pub uid: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub email: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub signatures: gpgme_key_sig_t,
    pub _last_keysig: gpgme_key_sig_t,
    pub address: *mut ::std::os::raw::c_char,
    pub tofu: gpgme_tofu_info_t,
}
impl ::std::default::Default for _gpgme_user_id {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_user_id_t = *mut _gpgme_user_id;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_key {
    pub _refs: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub protocol: gpgme_protocol_t,
    pub issuer_serial: *mut ::std::os::raw::c_char,
    pub issuer_name: *mut ::std::os::raw::c_char,
    pub chain_id: *mut ::std::os::raw::c_char,
    pub owner_trust: gpgme_validity_t,
    pub subkeys: gpgme_subkey_t,
    pub uids: gpgme_user_id_t,
    pub _last_subkey: gpgme_subkey_t,
    pub _last_uid: gpgme_user_id_t,
    pub keylist_mode: gpgme_keylist_mode_t,
    pub fpr: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _gpgme_key {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_key_t = *mut _gpgme_key;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_invalid_key {
    pub next: *mut _gpgme_invalid_key,
    pub fpr: *mut ::std::os::raw::c_char,
    pub reason: gpgme_error_t,
}
impl ::std::default::Default for _gpgme_invalid_key {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_invalid_key_t = *mut _gpgme_invalid_key;
pub type gpgme_passphrase_cb_t =
    ::std::option::Option<unsafe extern "C" fn(hook:
                                                   *mut ::std::os::raw::c_void,
                                               uid_hint:
                                                   *const ::std::os::raw::c_char,
                                               passphrase_info:
                                                   *const ::std::os::raw::c_char,
                                               prev_was_bad:
                                                   ::std::os::raw::c_int,
                                               fd: ::std::os::raw::c_int)
                              -> gpgme_error_t>;
pub type gpgme_progress_cb_t =
    ::std::option::Option<unsafe extern "C" fn(opaque:
                                                   *mut ::std::os::raw::c_void,
                                               what:
                                                   *const ::std::os::raw::c_char,
                                               type_: ::std::os::raw::c_int,
                                               current: ::std::os::raw::c_int,
                                               total: ::std::os::raw::c_int)>;
pub type gpgme_status_cb_t =
    ::std::option::Option<unsafe extern "C" fn(opaque:
                                                   *mut ::std::os::raw::c_void,
                                               keyword:
                                                   *const ::std::os::raw::c_char,
                                               args:
                                                   *const ::std::os::raw::c_char)
                              -> gpgme_error_t>;
pub type gpgme_interact_cb_t =
    ::std::option::Option<unsafe extern "C" fn(opaque:
                                                   *mut ::std::os::raw::c_void,
                                               keyword:
                                                   *const ::std::os::raw::c_char,
                                               args:
                                                   *const ::std::os::raw::c_char,
                                               fd: ::std::os::raw::c_int)
                              -> gpgme_error_t>;
pub type gpgme_edit_cb_t =
    ::std::option::Option<unsafe extern "C" fn(opaque:
                                                   *mut ::std::os::raw::c_void,
                                               status: gpgme_status_code_t,
                                               args:
                                                   *const ::std::os::raw::c_char,
                                               fd: ::std::os::raw::c_int)
                              -> gpgme_error_t>;
pub type gpgme_io_cb_t =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void,
                                               fd: ::std::os::raw::c_int)
                              -> gpgme_error_t>;
pub type gpgme_register_io_cb_t =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void,
                                               fd: ::std::os::raw::c_int,
                                               dir: ::std::os::raw::c_int,
                                               fnc: gpgme_io_cb_t,
                                               fnc_data:
                                                   *mut ::std::os::raw::c_void,
                                               tag:
                                                   *mut *mut ::std::os::raw::c_void)
                              -> gpgme_error_t>;
pub type gpgme_remove_io_cb_t =
    ::std::option::Option<unsafe extern "C" fn(tag:
                                                   *mut ::std::os::raw::c_void)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_event_io_t {
    GPGME_EVENT_START = 0,
    GPGME_EVENT_DONE = 1,
    GPGME_EVENT_NEXT_KEY = 2,
    GPGME_EVENT_NEXT_TRUSTITEM = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gpgme_io_event_done_data {
    pub err: gpgme_error_t,
    pub op_err: gpgme_error_t,
}
impl ::std::default::Default for gpgme_io_event_done_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_io_event_done_data_t = *mut gpgme_io_event_done_data;
pub type gpgme_event_io_cb_t =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void,
                                               type_: gpgme_event_io_t,
                                               type_data:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gpgme_io_cbs {
    pub add: gpgme_register_io_cb_t,
    pub add_priv: *mut ::std::os::raw::c_void,
    pub remove: gpgme_remove_io_cb_t,
    pub event: gpgme_event_io_cb_t,
    pub event_priv: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for gpgme_io_cbs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_io_cbs_t = *mut gpgme_io_cbs;
pub type gpgme_data_read_cb_t =
    ::std::option::Option<unsafe extern "C" fn(handle:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *mut ::std::os::raw::c_void,
                                               size: size_t) -> ssize_t>;
pub type gpgme_data_write_cb_t =
    ::std::option::Option<unsafe extern "C" fn(handle:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *const ::std::os::raw::c_void,
                                               size: size_t) -> ssize_t>;
pub type gpgme_data_seek_cb_t =
    ::std::option::Option<unsafe extern "C" fn(handle:
                                                   *mut ::std::os::raw::c_void,
                                               offset: off_t,
                                               whence: ::std::os::raw::c_int)
                              -> off_t>;
pub type gpgme_data_release_cb_t =
    ::std::option::Option<unsafe extern "C" fn(handle:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gpgme_data_cbs {
    pub read: gpgme_data_read_cb_t,
    pub write: gpgme_data_write_cb_t,
    pub seek: gpgme_data_seek_cb_t,
    pub release: gpgme_data_release_cb_t,
}
impl ::std::default::Default for gpgme_data_cbs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_data_cbs_t = *mut gpgme_data_cbs;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_encrypt_result {
    pub invalid_recipients: gpgme_invalid_key_t,
}
impl ::std::default::Default for _gpgme_op_encrypt_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_encrypt_result_t = *mut _gpgme_op_encrypt_result;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_encrypt_flags_t {
    GPGME_ENCRYPT_ALWAYS_TRUST = 1,
    GPGME_ENCRYPT_NO_ENCRYPT_TO = 2,
    GPGME_ENCRYPT_PREPARE = 4,
    GPGME_ENCRYPT_EXPECT_SIGN = 8,
    GPGME_ENCRYPT_NO_COMPRESS = 16,
    GPGME_ENCRYPT_SYMMETRIC = 32,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_recipient {
    pub next: *mut _gpgme_recipient,
    pub keyid: *mut ::std::os::raw::c_char,
    pub _keyid: [::std::os::raw::c_char; 17usize],
    pub pubkey_algo: gpgme_pubkey_algo_t,
    pub status: gpgme_error_t,
}
impl ::std::default::Default for _gpgme_recipient {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_recipient_t = *mut _gpgme_recipient;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_decrypt_result {
    pub unsupported_algorithm: *mut ::std::os::raw::c_char,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: ::std::os::raw::c_int,
    pub recipients: gpgme_recipient_t,
    pub file_name: *mut ::std::os::raw::c_char,
    pub session_key: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _gpgme_op_decrypt_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_decrypt_result_t = *mut _gpgme_op_decrypt_result;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_new_signature {
    pub next: *mut _gpgme_new_signature,
    pub type_: gpgme_sig_mode_t,
    pub pubkey_algo: gpgme_pubkey_algo_t,
    pub hash_algo: gpgme_hash_algo_t,
    pub _obsolete_class: ::std::os::raw::c_ulong,
    pub timestamp: ::std::os::raw::c_long,
    pub fpr: *mut ::std::os::raw::c_char,
    pub class: ::std::os::raw::c_uint,
    pub sig_class: ::std::os::raw::c_uint,
}
impl ::std::default::Default for _gpgme_new_signature {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_new_signature_t = *mut _gpgme_new_signature;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_sign_result {
    pub invalid_signers: gpgme_invalid_key_t,
    pub signatures: gpgme_new_signature_t,
}
impl ::std::default::Default for _gpgme_op_sign_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_sign_result_t = *mut _gpgme_op_sign_result;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_sigsum_t {
    GPGME_SIGSUM_VALID = 1,
    GPGME_SIGSUM_GREEN = 2,
    GPGME_SIGSUM_RED = 4,
    GPGME_SIGSUM_KEY_REVOKED = 16,
    GPGME_SIGSUM_KEY_EXPIRED = 32,
    GPGME_SIGSUM_SIG_EXPIRED = 64,
    GPGME_SIGSUM_KEY_MISSING = 128,
    GPGME_SIGSUM_CRL_MISSING = 256,
    GPGME_SIGSUM_CRL_TOO_OLD = 512,
    GPGME_SIGSUM_BAD_POLICY = 1024,
    GPGME_SIGSUM_SYS_ERROR = 2048,
    GPGME_SIGSUM_TOFU_CONFLICT = 4096,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_signature {
    pub next: *mut _gpgme_signature,
    pub summary: gpgme_sigsum_t,
    pub fpr: *mut ::std::os::raw::c_char,
    pub status: gpgme_error_t,
    pub notations: gpgme_sig_notation_t,
    pub timestamp: ::std::os::raw::c_ulong,
    pub exp_timestamp: ::std::os::raw::c_ulong,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: ::std::os::raw::c_int,
    pub validity: gpgme_validity_t,
    pub validity_reason: gpgme_error_t,
    pub pubkey_algo: gpgme_pubkey_algo_t,
    pub hash_algo: gpgme_hash_algo_t,
    pub pka_address: *mut ::std::os::raw::c_char,
    pub key: gpgme_key_t,
}
impl ::std::default::Default for _gpgme_signature {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_signature_t = *mut _gpgme_signature;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_verify_result {
    pub signatures: gpgme_signature_t,
    pub file_name: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _gpgme_op_verify_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_verify_result_t = *mut _gpgme_op_verify_result;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_import_status {
    pub next: *mut _gpgme_import_status,
    pub fpr: *mut ::std::os::raw::c_char,
    pub result: gpgme_error_t,
    pub status: ::std::os::raw::c_uint,
}
impl ::std::default::Default for _gpgme_import_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_import_status_t = *mut _gpgme_import_status;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_import_result {
    pub considered: ::std::os::raw::c_int,
    pub no_user_id: ::std::os::raw::c_int,
    pub imported: ::std::os::raw::c_int,
    pub imported_rsa: ::std::os::raw::c_int,
    pub unchanged: ::std::os::raw::c_int,
    pub new_user_ids: ::std::os::raw::c_int,
    pub new_sub_keys: ::std::os::raw::c_int,
    pub new_signatures: ::std::os::raw::c_int,
    pub new_revocations: ::std::os::raw::c_int,
    pub secret_read: ::std::os::raw::c_int,
    pub secret_imported: ::std::os::raw::c_int,
    pub secret_unchanged: ::std::os::raw::c_int,
    pub skipped_new_keys: ::std::os::raw::c_int,
    pub not_imported: ::std::os::raw::c_int,
    pub imports: gpgme_import_status_t,
}
impl ::std::default::Default for _gpgme_op_import_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_import_result_t = *mut _gpgme_op_import_result;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_genkey_result {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub fpr: *mut ::std::os::raw::c_char,
    pub pubkey: gpgme_data_t,
    pub seckey: gpgme_data_t,
}
impl ::std::default::Default for _gpgme_op_genkey_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_genkey_result_t = *mut _gpgme_op_genkey_result;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_keylist_result {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for _gpgme_op_keylist_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_keylist_result_t = *mut _gpgme_op_keylist_result;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_trust_item {
    pub _refs: ::std::os::raw::c_uint,
    pub keyid: *mut ::std::os::raw::c_char,
    pub _keyid: [::std::os::raw::c_char; 17usize],
    pub type_: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub owner_trust: *mut ::std::os::raw::c_char,
    pub _owner_trust: [::std::os::raw::c_char; 2usize],
    pub validity: *mut ::std::os::raw::c_char,
    pub _validity: [::std::os::raw::c_char; 2usize],
    pub name: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _gpgme_trust_item {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_trust_item_t = *mut _gpgme_trust_item;
pub type gpgme_assuan_data_cb_t =
    ::std::option::Option<unsafe extern "C" fn(opaque:
                                                   *mut ::std::os::raw::c_void,
                                               data:
                                                   *const ::std::os::raw::c_void,
                                               datalen: size_t)
                              -> gpgme_error_t>;
pub type gpgme_assuan_inquire_cb_t =
    ::std::option::Option<unsafe extern "C" fn(opaque:
                                                   *mut ::std::os::raw::c_void,
                                               name:
                                                   *const ::std::os::raw::c_char,
                                               args:
                                                   *const ::std::os::raw::c_char,
                                               r_data: *mut gpgme_data_t)
                              -> gpgme_error_t>;
pub type gpgme_assuan_status_cb_t =
    ::std::option::Option<unsafe extern "C" fn(opaque:
                                                   *mut ::std::os::raw::c_void,
                                               status:
                                                   *const ::std::os::raw::c_char,
                                               args:
                                                   *const ::std::os::raw::c_char)
                              -> gpgme_error_t>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_assuan_result {
    pub err: gpgme_error_t,
}
impl ::std::default::Default for _gpgme_op_assuan_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_assuan_result_t = *mut _gpgme_op_assuan_result;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_vfs_mount_result {
    pub mount_dir: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _gpgme_op_vfs_mount_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_vfs_mount_result_t = *mut _gpgme_op_vfs_mount_result;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_conf_level_t {
    GPGME_CONF_BASIC = 0,
    GPGME_CONF_ADVANCED = 1,
    GPGME_CONF_EXPERT = 2,
    GPGME_CONF_INVISIBLE = 3,
    GPGME_CONF_INTERNAL = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gpgme_conf_type_t {
    GPGME_CONF_NONE = 0,
    GPGME_CONF_STRING = 1,
    GPGME_CONF_INT32 = 2,
    GPGME_CONF_UINT32 = 3,
    GPGME_CONF_FILENAME = 32,
    GPGME_CONF_LDAP_SERVER = 33,
    GPGME_CONF_KEY_FPR = 34,
    GPGME_CONF_PUB_KEY = 35,
    GPGME_CONF_SEC_KEY = 36,
    GPGME_CONF_ALIAS_LIST = 37,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gpgme_conf_arg {
    pub next: *mut gpgme_conf_arg,
    pub no_arg: ::std::os::raw::c_uint,
    pub value: Union_Unnamed7,
}
impl ::std::default::Default for gpgme_conf_arg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed7 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed7 {
    pub unsafe fn count(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uint32(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn int32(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string(&mut self) -> *mut *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_conf_arg_t = *mut gpgme_conf_arg;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gpgme_conf_opt {
    pub next: *mut gpgme_conf_opt,
    pub name: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_uint,
    pub level: gpgme_conf_level_t,
    pub description: *mut ::std::os::raw::c_char,
    pub type_: gpgme_conf_type_t,
    pub alt_type: gpgme_conf_type_t,
    pub argname: *mut ::std::os::raw::c_char,
    pub default_value: gpgme_conf_arg_t,
    pub default_description: *mut ::std::os::raw::c_char,
    pub no_arg_value: gpgme_conf_arg_t,
    pub no_arg_description: *mut ::std::os::raw::c_char,
    pub value: gpgme_conf_arg_t,
    pub change_value: ::std::os::raw::c_int,
    pub new_value: gpgme_conf_arg_t,
    pub user_data: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for gpgme_conf_opt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_conf_opt_t = *mut gpgme_conf_opt;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gpgme_conf_comp {
    pub next: *mut gpgme_conf_comp,
    pub _last_opt_p: *mut gpgme_conf_opt_t,
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub program_name: *mut ::std::os::raw::c_char,
    pub options: *mut gpgme_conf_opt,
}
impl ::std::default::Default for gpgme_conf_comp {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_conf_comp_t = *mut gpgme_conf_comp;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _gpgme_op_query_swdb_result {
    pub next: *mut _gpgme_op_query_swdb_result,
    pub name: *mut ::std::os::raw::c_char,
    pub iversion: *mut ::std::os::raw::c_char,
    pub created: ::std::os::raw::c_ulong,
    pub retrieved: ::std::os::raw::c_ulong,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub version: *mut ::std::os::raw::c_char,
    pub reldate: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for _gpgme_op_query_swdb_result {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgme_query_swdb_result_t = *mut _gpgme_op_query_swdb_result;
pub type GpgmeCtx = gpgme_ctx_t;
pub type GpgmeData = gpgme_data_t;
pub type GpgmeError = gpgme_error_t;
pub type GpgmeDataEncoding = gpgme_data_encoding_t;
pub type GpgmePubKeyAlgo = gpgme_pubkey_algo_t;
pub type GpgmeHashAlgo = gpgme_hash_algo_t;
pub type GpgmeSigStat = gpgme_sig_stat_t;
pub type GpgmeSigMode = gpgme_sig_mode_t;
pub type GpgmeAttr = gpgme_attr_t;
pub type GpgmeValidity = gpgme_validity_t;
pub type GpgmeProtocol = gpgme_protocol_t;
pub type GpgmeEngineInfo = gpgme_engine_info_t;
pub type GpgmeSubkey = gpgme_subkey_t;
pub type GpgmeKeySig = gpgme_key_sig_t;
pub type GpgmeUserID = gpgme_user_id_t;
pub type GpgmeKey = gpgme_key_t;
pub type GpgmePassphraseCb = gpgme_passphrase_cb_t;
pub type GpgmeProgressCb = gpgme_progress_cb_t;
pub type GpgmeIOCb = gpgme_io_cb_t;
pub type GpgmeRegisterIOCb = gpgme_register_io_cb_t;
pub type GpgmeRemoveIOCb = gpgme_remove_io_cb_t;
pub type GpgmeEventIO = gpgme_event_io_t;
pub type GpgmeEventIOCb = gpgme_event_io_cb_t;
pub type GpgmeDataReadCb = gpgme_data_read_cb_t;
pub type GpgmeDataWriteCb = gpgme_data_write_cb_t;
pub type GpgmeDataSeekCb = gpgme_data_seek_cb_t;
pub type GpgmeDataReleaseCb = gpgme_data_release_cb_t;
pub type GpgmeEncryptResult = gpgme_encrypt_result_t;
pub type GpgmeSigNotation = gpgme_sig_notation_t;
pub type GpgmeSignature = gpgme_signature_t;
pub type GpgmeVerifyResult = gpgme_verify_result_t;
pub type GpgmeImportStatus = gpgme_import_status_t;
pub type GpgmeImportResult = gpgme_import_result_t;
pub type GpgmeGenKeyResult = gpgme_genkey_result_t;
pub type GpgmeTrustItem = gpgme_trust_item_t;
pub type GpgmeStatusCode = gpgme_status_code_t;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut __daylight: ::std::os::raw::c_int;
    pub static mut __timezone: ::std::os::raw::c_long;
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut daylight: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn gets(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
    pub fn mktime(__tp: *mut tm) -> time_t;
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: size_t,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: size_t,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
    pub fn localtime(__timer: *const time_t) -> *mut tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tzset();
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
    pub fn timegm(__tp: *mut tm) -> time_t;
    pub fn timelocal(__tp: *mut tm) -> time_t;
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn gpg_err_init() -> gpg_error_t;
    pub fn gpg_err_deinit(mode: ::std::os::raw::c_int);
    pub fn gpgrt_set_syscall_clamp(pre:
                                       ::std::option::Option<extern "C" fn()>,
                                   post:
                                       ::std::option::Option<extern "C" fn()>);
    pub fn gpgrt_set_alloc_func(f:
                                    ::std::option::Option<unsafe extern "C" fn(a:
                                                                                   *mut ::std::os::raw::c_void,
                                                                               n:
                                                                                   size_t)
                                                              ->
                                                                  *mut ::std::os::raw::c_void>);
    pub fn gpg_strerror(err: gpg_error_t) -> *const ::std::os::raw::c_char;
    pub fn gpg_strerror_r(err: gpg_error_t, buf: *mut ::std::os::raw::c_char,
                          buflen: size_t) -> ::std::os::raw::c_int;
    pub fn gpg_strsource(err: gpg_error_t) -> *const ::std::os::raw::c_char;
    pub fn gpg_err_code_from_errno(err: ::std::os::raw::c_int)
     -> gpg_err_code_t;
    pub fn gpg_err_code_to_errno(code: gpg_err_code_t)
     -> ::std::os::raw::c_int;
    pub fn gpg_err_code_from_syserror() -> gpg_err_code_t;
    pub fn gpg_err_set_errno(err: ::std::os::raw::c_int);
    pub fn gpgrt_check_version(req_version: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn gpg_error_check_version(req_version: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn gpgrt_lock_init(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_lock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_trylock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_unlock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_destroy(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_yield() -> gpg_err_code_t;
    pub fn gpgrt_fopen(path: *const ::std::os::raw::c_char,
                       mode: *const ::std::os::raw::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_mopen(data: *mut ::std::os::raw::c_void, data_n: size_t,
                       data_len: size_t, grow: ::std::os::raw::c_uint,
                       func_realloc:
                           ::std::option::Option<unsafe extern "C" fn(mem:
                                                                          *mut ::std::os::raw::c_void,
                                                                      size:
                                                                          size_t)
                                                     ->
                                                         *mut ::std::os::raw::c_void>,
                       func_free:
                           ::std::option::Option<unsafe extern "C" fn(mem:
                                                                          *mut ::std::os::raw::c_void)>,
                       mode: *const ::std::os::raw::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_fopenmem(memlimit: size_t,
                          mode: *const ::std::os::raw::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fopenmem_init(memlimit: size_t,
                               mode: *const ::std::os::raw::c_char,
                               data: *const ::std::os::raw::c_void,
                               datalen: size_t) -> gpgrt_stream_t;
    pub fn gpgrt_fdopen(filedes: ::std::os::raw::c_int,
                        mode: *const ::std::os::raw::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fdopen_nc(filedes: ::std::os::raw::c_int,
                           mode: *const ::std::os::raw::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_sysopen(syshd: *mut gpgrt_syshd_t,
                         mode: *const ::std::os::raw::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_sysopen_nc(syshd: *mut gpgrt_syshd_t,
                            mode: *const ::std::os::raw::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fpopen(fp: *mut FILE, mode: *const ::std::os::raw::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fpopen_nc(fp: *mut FILE, mode: *const ::std::os::raw::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_freopen(path: *const ::std::os::raw::c_char,
                         mode: *const ::std::os::raw::c_char,
                         stream: gpgrt_stream_t) -> gpgrt_stream_t;
    pub fn gpgrt_fopencookie(cookie: *mut ::std::os::raw::c_void,
                             mode: *const ::std::os::raw::c_char,
                             functions: gpgrt_cookie_io_functions_t)
     -> gpgrt_stream_t;
    pub fn gpgrt_fclose(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fclose_snatch(stream: gpgrt_stream_t,
                               r_buffer: *mut *mut ::std::os::raw::c_void,
                               r_buflen: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_onclose(stream: gpgrt_stream_t, mode: ::std::os::raw::c_int,
                         fnc:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            gpgrt_stream_t,
                                                                        arg2:
                                                                            *mut ::std::os::raw::c_void)>,
                         fnc_value: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_fileno(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fileno_unlocked(stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_syshd(stream: gpgrt_stream_t, syshd: *mut gpgrt_syshd_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_syshd_unlocked(stream: gpgrt_stream_t,
                                syshd: *mut gpgrt_syshd_t)
     -> ::std::os::raw::c_int;
    pub fn _gpgrt_set_std_fd(no: ::std::os::raw::c_int,
                             fd: ::std::os::raw::c_int);
    pub fn _gpgrt_get_std_stream(fd: ::std::os::raw::c_int) -> gpgrt_stream_t;
    pub fn gpgrt_flockfile(stream: gpgrt_stream_t);
    pub fn gpgrt_ftrylockfile(stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_funlockfile(stream: gpgrt_stream_t);
    pub fn gpgrt_feof(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_feof_unlocked(stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_ferror(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_ferror_unlocked(stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_clearerr(stream: gpgrt_stream_t);
    pub fn gpgrt_clearerr_unlocked(stream: gpgrt_stream_t);
    pub fn _gpgrt_pending(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn _gpgrt_pending_unlocked(stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_fflush(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fseek(stream: gpgrt_stream_t, offset: ::std::os::raw::c_long,
                       whence: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_fseeko(stream: gpgrt_stream_t, offset: gpgrt_off_t,
                        whence: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_ftell(stream: gpgrt_stream_t) -> ::std::os::raw::c_long;
    pub fn gpgrt_ftello(stream: gpgrt_stream_t) -> gpgrt_off_t;
    pub fn gpgrt_rewind(stream: gpgrt_stream_t);
    pub fn gpgrt_fgetc(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fputc(c: ::std::os::raw::c_int, stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn _gpgrt_getc_underflow(stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn _gpgrt_putc_overflow(c: ::std::os::raw::c_int,
                                stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_ungetc(c: ::std::os::raw::c_int, stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_read(stream: gpgrt_stream_t,
                      buffer: *mut ::std::os::raw::c_void,
                      bytes_to_read: size_t, bytes_read: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_write(stream: gpgrt_stream_t,
                       buffer: *const ::std::os::raw::c_void,
                       bytes_to_write: size_t, bytes_written: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_write_sanitized(stream: gpgrt_stream_t,
                                 buffer: *const ::std::os::raw::c_void,
                                 length: size_t,
                                 delimiters: *const ::std::os::raw::c_char,
                                 bytes_written: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_write_hexstring(stream: gpgrt_stream_t,
                                 buffer: *const ::std::os::raw::c_void,
                                 length: size_t,
                                 reserved: ::std::os::raw::c_int,
                                 bytes_written: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_fread(ptr: *mut ::std::os::raw::c_void, size: size_t,
                       nitems: size_t, stream: gpgrt_stream_t) -> size_t;
    pub fn gpgrt_fwrite(ptr: *const ::std::os::raw::c_void, size: size_t,
                        memb: size_t, stream: gpgrt_stream_t) -> size_t;
    pub fn gpgrt_fgets(s: *mut ::std::os::raw::c_char,
                       n: ::std::os::raw::c_int, stream: gpgrt_stream_t)
     -> *mut ::std::os::raw::c_char;
    pub fn gpgrt_fputs(s: *const ::std::os::raw::c_char,
                       stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fputs_unlocked(s: *const ::std::os::raw::c_char,
                                stream: gpgrt_stream_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_getline(lineptr: *mut *mut ::std::os::raw::c_char,
                         n: *mut size_t, stream: gpgrt_stream_t) -> ssize_t;
    pub fn gpgrt_read_line(stream: gpgrt_stream_t,
                           addr_of_buffer: *mut *mut ::std::os::raw::c_char,
                           length_of_buffer: *mut size_t,
                           max_length: *mut size_t) -> ssize_t;
    pub fn gpgrt_free(a: *mut ::std::os::raw::c_void);
    pub fn gpgrt_fprintf(stream: gpgrt_stream_t,
                         format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_fprintf_unlocked(stream: gpgrt_stream_t,
                                  format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_printf(format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_printf_unlocked(format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_vfprintf(stream: gpgrt_stream_t,
                          format: *const ::std::os::raw::c_char, ap: va_list)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_vfprintf_unlocked(stream: gpgrt_stream_t,
                                   format: *const ::std::os::raw::c_char,
                                   ap: va_list) -> ::std::os::raw::c_int;
    pub fn gpgrt_setvbuf(stream: gpgrt_stream_t,
                         buf: *mut ::std::os::raw::c_char,
                         mode: ::std::os::raw::c_int, size: size_t)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_setbuf(stream: gpgrt_stream_t,
                        buf: *mut ::std::os::raw::c_char);
    pub fn gpgrt_set_binary(stream: gpgrt_stream_t);
    pub fn gpgrt_tmpfile() -> gpgrt_stream_t;
    pub fn gpgrt_opaque_set(stream: gpgrt_stream_t,
                            opaque: *mut ::std::os::raw::c_void);
    pub fn gpgrt_opaque_get(stream: gpgrt_stream_t)
     -> *mut ::std::os::raw::c_void;
    pub fn gpgrt_fname_set(stream: gpgrt_stream_t,
                           fname: *const ::std::os::raw::c_char);
    pub fn gpgrt_fname_get(stream: gpgrt_stream_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgrt_asprintf(r_buf: *mut *mut ::std::os::raw::c_char,
                          format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_vasprintf(r_buf: *mut *mut ::std::os::raw::c_char,
                           format: *const ::std::os::raw::c_char, ap: va_list)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_bsprintf(format: *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_char;
    pub fn gpgrt_vbsprintf(format: *const ::std::os::raw::c_char, ap: va_list)
     -> *mut ::std::os::raw::c_char;
    pub fn gpgrt_snprintf(buf: *mut ::std::os::raw::c_char, bufsize: size_t,
                          format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn gpgrt_vsnprintf(buf: *mut ::std::os::raw::c_char, bufsize: size_t,
                           format: *const ::std::os::raw::c_char,
                           arg_ptr: va_list) -> ::std::os::raw::c_int;
    pub fn gpgme_strerror(err: gpgme_error_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_strerror_r(err: gpg_error_t,
                            buf: *mut ::std::os::raw::c_char, buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn gpgme_strsource(err: gpgme_error_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_err_code_from_errno(err: ::std::os::raw::c_int)
     -> gpgme_err_code_t;
    pub fn gpgme_err_code_to_errno(code: gpgme_err_code_t)
     -> ::std::os::raw::c_int;
    pub fn gpgme_err_code_from_syserror() -> gpgme_err_code_t;
    pub fn gpgme_err_set_errno(err: ::std::os::raw::c_int);
    pub fn gpgme_err_make_from_errno(source: gpgme_err_source_t,
                                     err: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_error_from_errno(err: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_new(ctx: *mut gpgme_ctx_t) -> gpgme_error_t;
    pub fn gpgme_release(ctx: gpgme_ctx_t);
    pub fn gpgme_set_ctx_flag(ctx: gpgme_ctx_t,
                              name: *const ::std::os::raw::c_char,
                              value: *const ::std::os::raw::c_char)
     -> gpgme_error_t;
    pub fn gpgme_get_ctx_flag(ctx: gpgme_ctx_t,
                              name: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_set_protocol(ctx: gpgme_ctx_t, proto: gpgme_protocol_t)
     -> gpgme_error_t;
    pub fn gpgme_get_protocol(ctx: gpgme_ctx_t) -> gpgme_protocol_t;
    pub fn gpgme_set_sub_protocol(ctx: gpgme_ctx_t, proto: gpgme_protocol_t)
     -> gpgme_error_t;
    pub fn gpgme_get_sub_protocol(ctx: gpgme_ctx_t) -> gpgme_protocol_t;
    pub fn gpgme_get_protocol_name(proto: gpgme_protocol_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_set_armor(ctx: gpgme_ctx_t, yes: ::std::os::raw::c_int);
    pub fn gpgme_get_armor(ctx: gpgme_ctx_t) -> ::std::os::raw::c_int;
    pub fn gpgme_set_textmode(ctx: gpgme_ctx_t, yes: ::std::os::raw::c_int);
    pub fn gpgme_get_textmode(ctx: gpgme_ctx_t) -> ::std::os::raw::c_int;
    pub fn gpgme_set_offline(ctx: gpgme_ctx_t, yes: ::std::os::raw::c_int);
    pub fn gpgme_get_offline(ctx: gpgme_ctx_t) -> ::std::os::raw::c_int;
    pub fn gpgme_set_include_certs(ctx: gpgme_ctx_t,
                                   nr_of_certs: ::std::os::raw::c_int);
    pub fn gpgme_get_include_certs(ctx: gpgme_ctx_t) -> ::std::os::raw::c_int;
    pub fn gpgme_set_keylist_mode(ctx: gpgme_ctx_t,
                                  mode: gpgme_keylist_mode_t)
     -> gpgme_error_t;
    pub fn gpgme_get_keylist_mode(ctx: gpgme_ctx_t) -> gpgme_keylist_mode_t;
    pub fn gpgme_set_pinentry_mode(ctx: gpgme_ctx_t,
                                   mode: gpgme_pinentry_mode_t)
     -> gpgme_error_t;
    pub fn gpgme_get_pinentry_mode(ctx: gpgme_ctx_t) -> gpgme_pinentry_mode_t;
    pub fn gpgme_set_passphrase_cb(ctx: gpgme_ctx_t,
                                   cb: gpgme_passphrase_cb_t,
                                   hook_value: *mut ::std::os::raw::c_void);
    pub fn gpgme_get_passphrase_cb(ctx: gpgme_ctx_t,
                                   cb: *mut gpgme_passphrase_cb_t,
                                   hook_value:
                                       *mut *mut ::std::os::raw::c_void);
    pub fn gpgme_set_progress_cb(c: gpgme_ctx_t, cb: gpgme_progress_cb_t,
                                 hook_value: *mut ::std::os::raw::c_void);
    pub fn gpgme_get_progress_cb(ctx: gpgme_ctx_t,
                                 cb: *mut gpgme_progress_cb_t,
                                 hook_value:
                                     *mut *mut ::std::os::raw::c_void);
    pub fn gpgme_set_status_cb(c: gpgme_ctx_t, cb: gpgme_status_cb_t,
                               hook_value: *mut ::std::os::raw::c_void);
    pub fn gpgme_get_status_cb(ctx: gpgme_ctx_t, cb: *mut gpgme_status_cb_t,
                               hook_value: *mut *mut ::std::os::raw::c_void);
    pub fn gpgme_set_locale(ctx: gpgme_ctx_t, category: ::std::os::raw::c_int,
                            value: *const ::std::os::raw::c_char)
     -> gpgme_error_t;
    pub fn gpgme_ctx_get_engine_info(ctx: gpgme_ctx_t) -> gpgme_engine_info_t;
    pub fn gpgme_ctx_set_engine_info(ctx: gpgme_ctx_t,
                                     proto: gpgme_protocol_t,
                                     file_name: *const ::std::os::raw::c_char,
                                     home_dir: *const ::std::os::raw::c_char)
     -> gpgme_error_t;
    pub fn gpgme_signers_clear(ctx: gpgme_ctx_t);
    pub fn gpgme_signers_add(ctx: gpgme_ctx_t, key: gpgme_key_t)
     -> gpgme_error_t;
    pub fn gpgme_signers_count(ctx: gpgme_ctx_t) -> ::std::os::raw::c_uint;
    pub fn gpgme_signers_enum(ctx: gpgme_ctx_t, seq: ::std::os::raw::c_int)
     -> gpgme_key_t;
    pub fn gpgme_get_sig_status(ctx: gpgme_ctx_t, idx: ::std::os::raw::c_int,
                                r_stat: *mut _gpgme_sig_stat_t,
                                r_created: *mut time_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_get_sig_ulong_attr(c: gpgme_ctx_t,
                                    idx: ::std::os::raw::c_int,
                                    what: _gpgme_attr_t,
                                    whatidx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulong;
    pub fn gpgme_get_sig_string_attr(c: gpgme_ctx_t,
                                     idx: ::std::os::raw::c_int,
                                     what: _gpgme_attr_t,
                                     whatidx: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_get_sig_key(ctx: gpgme_ctx_t, idx: ::std::os::raw::c_int,
                             r_key: *mut gpgme_key_t) -> gpgme_error_t;
    pub fn gpgme_sig_notation_clear(ctx: gpgme_ctx_t);
    pub fn gpgme_sig_notation_add(ctx: gpgme_ctx_t,
                                  name: *const ::std::os::raw::c_char,
                                  value: *const ::std::os::raw::c_char,
                                  flags: gpgme_sig_notation_flags_t)
     -> gpgme_error_t;
    pub fn gpgme_sig_notation_get(ctx: gpgme_ctx_t) -> gpgme_sig_notation_t;
    pub fn gpgme_set_sender(ctx: gpgme_ctx_t,
                            address: *const ::std::os::raw::c_char)
     -> gpgme_error_t;
    pub fn gpgme_get_sender(ctx: gpgme_ctx_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_set_io_cbs(ctx: gpgme_ctx_t, io_cbs: gpgme_io_cbs_t);
    pub fn gpgme_get_io_cbs(ctx: gpgme_ctx_t, io_cbs: gpgme_io_cbs_t);
    pub fn gpgme_io_read(fd: ::std::os::raw::c_int,
                         buffer: *mut ::std::os::raw::c_void, count: size_t)
     -> ssize_t;
    pub fn gpgme_io_write(fd: ::std::os::raw::c_int,
                          buffer: *const ::std::os::raw::c_void,
                          count: size_t) -> ssize_t;
    pub fn gpgme_io_writen(fd: ::std::os::raw::c_int,
                           buffer: *const ::std::os::raw::c_void,
                           count: size_t) -> ::std::os::raw::c_int;
    pub fn gpgme_wait(ctx: gpgme_ctx_t, status: *mut gpgme_error_t,
                      hang: ::std::os::raw::c_int) -> gpgme_ctx_t;
    pub fn gpgme_wait_ext(ctx: gpgme_ctx_t, status: *mut gpgme_error_t,
                          op_err: *mut gpgme_error_t,
                          hang: ::std::os::raw::c_int) -> gpgme_ctx_t;
    pub fn gpgme_cancel(ctx: gpgme_ctx_t) -> gpgme_error_t;
    pub fn gpgme_cancel_async(ctx: gpgme_ctx_t) -> gpgme_error_t;
    pub fn gpgme_data_read(dh: gpgme_data_t,
                           buffer: *mut ::std::os::raw::c_void, size: size_t)
     -> ssize_t;
    pub fn gpgme_data_write(dh: gpgme_data_t,
                            buffer: *const ::std::os::raw::c_void,
                            size: size_t) -> ssize_t;
    pub fn gpgme_data_seek(dh: gpgme_data_t, offset: off_t,
                           whence: ::std::os::raw::c_int) -> off_t;
    pub fn gpgme_data_new(r_dh: *mut gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_data_release(dh: gpgme_data_t);
    pub fn gpgme_data_new_from_mem(r_dh: *mut gpgme_data_t,
                                   buffer: *const ::std::os::raw::c_char,
                                   size: size_t, copy: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_data_release_and_get_mem(dh: gpgme_data_t,
                                          r_len: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn gpgme_free(buffer: *mut ::std::os::raw::c_void);
    pub fn gpgme_data_new_from_cbs(dh: *mut gpgme_data_t,
                                   cbs: gpgme_data_cbs_t,
                                   handle: *mut ::std::os::raw::c_void)
     -> gpgme_error_t;
    pub fn gpgme_data_new_from_fd(dh: *mut gpgme_data_t,
                                  fd: ::std::os::raw::c_int) -> gpgme_error_t;
    pub fn gpgme_data_new_from_stream(dh: *mut gpgme_data_t,
                                      stream: *mut FILE) -> gpgme_error_t;
    pub fn gpgme_data_get_encoding(dh: gpgme_data_t) -> gpgme_data_encoding_t;
    pub fn gpgme_data_set_encoding(dh: gpgme_data_t,
                                   enc: gpgme_data_encoding_t)
     -> gpgme_error_t;
    pub fn gpgme_data_get_file_name(dh: gpgme_data_t)
     -> *mut ::std::os::raw::c_char;
    pub fn gpgme_data_set_file_name(dh: gpgme_data_t,
                                    file_name: *const ::std::os::raw::c_char)
     -> gpgme_error_t;
    pub fn gpgme_data_set_flag(dh: gpgme_data_t,
                               name: *const ::std::os::raw::c_char,
                               value: *const ::std::os::raw::c_char)
     -> gpg_error_t;
    pub fn gpgme_data_identify(dh: gpgme_data_t,
                               reserved: ::std::os::raw::c_int)
     -> gpgme_data_type_t;
    pub fn gpgme_data_new_with_read_cb(r_dh: *mut gpgme_data_t,
                                       read_cb:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut ::std::os::raw::c_void,
                                                                                      arg2:
                                                                                          *mut ::std::os::raw::c_char,
                                                                                      arg3:
                                                                                          size_t,
                                                                                      arg4:
                                                                                          *mut size_t)
                                                                     ->
                                                                         ::std::os::raw::c_int>,
                                       read_cb_value:
                                           *mut ::std::os::raw::c_void)
     -> gpgme_error_t;
    pub fn gpgme_data_new_from_file(r_dh: *mut gpgme_data_t,
                                    fname: *const ::std::os::raw::c_char,
                                    copy: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_data_new_from_filepart(r_dh: *mut gpgme_data_t,
                                        fname: *const ::std::os::raw::c_char,
                                        fp: *mut FILE, offset: off_t,
                                        length: size_t) -> gpgme_error_t;
    pub fn gpgme_data_rewind(dh: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_get_key(ctx: gpgme_ctx_t, fpr: *const ::std::os::raw::c_char,
                         r_key: *mut gpgme_key_t,
                         secret: ::std::os::raw::c_int) -> gpgme_error_t;
    pub fn gpgme_key_from_uid(key: *mut gpgme_key_t,
                              name: *const ::std::os::raw::c_char)
     -> gpgme_error_t;
    pub fn gpgme_key_ref(key: gpgme_key_t);
    pub fn gpgme_key_unref(key: gpgme_key_t);
    pub fn gpgme_key_release(key: gpgme_key_t);
    pub fn gpgme_key_get_string_attr(key: gpgme_key_t, what: _gpgme_attr_t,
                                     reserved: *const ::std::os::raw::c_void,
                                     idx: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_key_get_ulong_attr(key: gpgme_key_t, what: _gpgme_attr_t,
                                    reserved: *const ::std::os::raw::c_void,
                                    idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulong;
    pub fn gpgme_key_sig_get_string_attr(key: gpgme_key_t,
                                         uid_idx: ::std::os::raw::c_int,
                                         what: _gpgme_attr_t,
                                         reserved:
                                             *const ::std::os::raw::c_void,
                                         idx: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_key_sig_get_ulong_attr(key: gpgme_key_t,
                                        uid_idx: ::std::os::raw::c_int,
                                        what: _gpgme_attr_t,
                                        reserved:
                                            *const ::std::os::raw::c_void,
                                        idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulong;
    pub fn gpgme_op_encrypt_result(ctx: gpgme_ctx_t)
     -> gpgme_encrypt_result_t;
    pub fn gpgme_op_encrypt_start(ctx: gpgme_ctx_t, recp: *mut gpgme_key_t,
                                  flags: gpgme_encrypt_flags_t,
                                  plain: gpgme_data_t, cipher: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_encrypt(ctx: gpgme_ctx_t, recp: *mut gpgme_key_t,
                            flags: gpgme_encrypt_flags_t, plain: gpgme_data_t,
                            cipher: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_encrypt_sign_start(ctx: gpgme_ctx_t,
                                       recp: *mut gpgme_key_t,
                                       flags: gpgme_encrypt_flags_t,
                                       plain: gpgme_data_t,
                                       cipher: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_encrypt_sign(ctx: gpgme_ctx_t, recp: *mut gpgme_key_t,
                                 flags: gpgme_encrypt_flags_t,
                                 plain: gpgme_data_t, cipher: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_decrypt_result(ctx: gpgme_ctx_t)
     -> gpgme_decrypt_result_t;
    pub fn gpgme_op_decrypt_start(ctx: gpgme_ctx_t, cipher: gpgme_data_t,
                                  plain: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_decrypt(ctx: gpgme_ctx_t, cipher: gpgme_data_t,
                            plain: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_decrypt_verify_start(ctx: gpgme_ctx_t,
                                         cipher: gpgme_data_t,
                                         plain: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_decrypt_verify(ctx: gpgme_ctx_t, cipher: gpgme_data_t,
                                   plain: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_sign_result(ctx: gpgme_ctx_t) -> gpgme_sign_result_t;
    pub fn gpgme_op_sign_start(ctx: gpgme_ctx_t, plain: gpgme_data_t,
                               sig: gpgme_data_t, mode: gpgme_sig_mode_t)
     -> gpgme_error_t;
    pub fn gpgme_op_sign(ctx: gpgme_ctx_t, plain: gpgme_data_t,
                         sig: gpgme_data_t, mode: gpgme_sig_mode_t)
     -> gpgme_error_t;
    pub fn gpgme_op_verify_result(ctx: gpgme_ctx_t) -> gpgme_verify_result_t;
    pub fn gpgme_op_verify_start(ctx: gpgme_ctx_t, sig: gpgme_data_t,
                                 signed_text: gpgme_data_t,
                                 plaintext: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_verify(ctx: gpgme_ctx_t, sig: gpgme_data_t,
                           signed_text: gpgme_data_t, plaintext: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_import_result(ctx: gpgme_ctx_t) -> gpgme_import_result_t;
    pub fn gpgme_op_import_start(ctx: gpgme_ctx_t, keydata: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_import(ctx: gpgme_ctx_t, keydata: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_import_ext(ctx: gpgme_ctx_t, keydata: gpgme_data_t,
                               nr: *mut ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_op_import_keys_start(ctx: gpgme_ctx_t,
                                      keys: *mut gpgme_key_t)
     -> gpgme_error_t;
    pub fn gpgme_op_import_keys(ctx: gpgme_ctx_t, keys: *mut gpgme_key_t)
     -> gpgme_error_t;
    pub fn gpgme_op_export_start(ctx: gpgme_ctx_t,
                                 pattern: *const ::std::os::raw::c_char,
                                 mode: gpgme_export_mode_t,
                                 keydata: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_export(ctx: gpgme_ctx_t,
                           pattern: *const ::std::os::raw::c_char,
                           mode: gpgme_export_mode_t, keydata: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_export_ext_start(ctx: gpgme_ctx_t,
                                     pattern:
                                         *mut *const ::std::os::raw::c_char,
                                     mode: gpgme_export_mode_t,
                                     keydata: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_export_ext(ctx: gpgme_ctx_t,
                               pattern: *mut *const ::std::os::raw::c_char,
                               mode: gpgme_export_mode_t,
                               keydata: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_export_keys_start(ctx: gpgme_ctx_t,
                                      keys: *mut gpgme_key_t,
                                      mode: gpgme_export_mode_t,
                                      keydata: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_export_keys(ctx: gpgme_ctx_t, keys: *mut gpgme_key_t,
                                mode: gpgme_export_mode_t,
                                keydata: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_genkey_start(ctx: gpgme_ctx_t,
                                 parms: *const ::std::os::raw::c_char,
                                 pubkey: gpgme_data_t, seckey: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_genkey(ctx: gpgme_ctx_t,
                           parms: *const ::std::os::raw::c_char,
                           pubkey: gpgme_data_t, seckey: gpgme_data_t)
     -> gpgme_error_t;
    pub fn gpgme_op_createkey_start(ctx: gpgme_ctx_t,
                                    userid: *const ::std::os::raw::c_char,
                                    algo: *const ::std::os::raw::c_char,
                                    reserved: ::std::os::raw::c_ulong,
                                    expires: ::std::os::raw::c_ulong,
                                    certkey: gpgme_key_t,
                                    flags: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_createkey(ctx: gpgme_ctx_t,
                              userid: *const ::std::os::raw::c_char,
                              algo: *const ::std::os::raw::c_char,
                              reserved: ::std::os::raw::c_ulong,
                              expires: ::std::os::raw::c_ulong,
                              certkey: gpgme_key_t,
                              flags: ::std::os::raw::c_uint) -> gpgme_error_t;
    pub fn gpgme_op_createsubkey_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                       algo: *const ::std::os::raw::c_char,
                                       reserved: ::std::os::raw::c_ulong,
                                       expires: ::std::os::raw::c_ulong,
                                       flags: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_createsubkey(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                 algo: *const ::std::os::raw::c_char,
                                 reserved: ::std::os::raw::c_ulong,
                                 expires: ::std::os::raw::c_ulong,
                                 flags: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_adduid_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                 userid: *const ::std::os::raw::c_char,
                                 reserved: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_adduid(ctx: gpgme_ctx_t, key: gpgme_key_t,
                           userid: *const ::std::os::raw::c_char,
                           reserved: ::std::os::raw::c_uint) -> gpgme_error_t;
    pub fn gpgme_op_revuid_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                 userid: *const ::std::os::raw::c_char,
                                 reserved: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_revuid(ctx: gpgme_ctx_t, key: gpgme_key_t,
                           userid: *const ::std::os::raw::c_char,
                           reserved: ::std::os::raw::c_uint) -> gpgme_error_t;
    pub fn gpgme_op_genkey_result(ctx: gpgme_ctx_t) -> gpgme_genkey_result_t;
    pub fn gpgme_op_delete_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                 allow_secret: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_op_delete(ctx: gpgme_ctx_t, key: gpgme_key_t,
                           allow_secret: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_op_keysign_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                  userid: *const ::std::os::raw::c_char,
                                  expires: ::std::os::raw::c_ulong,
                                  flags: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_keysign(ctx: gpgme_ctx_t, key: gpgme_key_t,
                            userid: *const ::std::os::raw::c_char,
                            expires: ::std::os::raw::c_ulong,
                            flags: ::std::os::raw::c_uint) -> gpgme_error_t;
    pub fn gpgme_op_interact_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                   flags: ::std::os::raw::c_uint,
                                   fnc: gpgme_interact_cb_t,
                                   fnc_value: *mut ::std::os::raw::c_void,
                                   out: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_interact(ctx: gpgme_ctx_t, key: gpgme_key_t,
                             flags: ::std::os::raw::c_uint,
                             fnc: gpgme_interact_cb_t,
                             fnc_value: *mut ::std::os::raw::c_void,
                             out: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_edit_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                               fnc: gpgme_edit_cb_t,
                               fnc_value: *mut ::std::os::raw::c_void,
                               out: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_edit(ctx: gpgme_ctx_t, key: gpgme_key_t,
                         fnc: gpgme_edit_cb_t,
                         fnc_value: *mut ::std::os::raw::c_void,
                         out: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_card_edit_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                    fnc: gpgme_edit_cb_t,
                                    fnc_value: *mut ::std::os::raw::c_void,
                                    out: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_card_edit(ctx: gpgme_ctx_t, key: gpgme_key_t,
                              fnc: gpgme_edit_cb_t,
                              fnc_value: *mut ::std::os::raw::c_void,
                              out: gpgme_data_t) -> gpgme_error_t;
    pub fn gpgme_op_tofu_policy_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                      policy: gpgme_tofu_policy_t)
     -> gpgme_error_t;
    pub fn gpgme_op_tofu_policy(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                policy: gpgme_tofu_policy_t) -> gpgme_error_t;
    pub fn gpgme_op_keylist_result(ctx: gpgme_ctx_t)
     -> gpgme_keylist_result_t;
    pub fn gpgme_op_keylist_start(ctx: gpgme_ctx_t,
                                  pattern: *const ::std::os::raw::c_char,
                                  secret_only: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_op_keylist_ext_start(ctx: gpgme_ctx_t,
                                      pattern:
                                          *mut *const ::std::os::raw::c_char,
                                      secret_only: ::std::os::raw::c_int,
                                      reserved: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_op_keylist_next(ctx: gpgme_ctx_t, r_key: *mut gpgme_key_t)
     -> gpgme_error_t;
    pub fn gpgme_op_keylist_end(ctx: gpgme_ctx_t) -> gpgme_error_t;
    pub fn gpgme_op_passwd_start(ctx: gpgme_ctx_t, key: gpgme_key_t,
                                 flags: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_passwd(ctx: gpgme_ctx_t, key: gpgme_key_t,
                           flags: ::std::os::raw::c_uint) -> gpgme_error_t;
    pub fn gpgme_op_trustlist_start(ctx: gpgme_ctx_t,
                                    pattern: *const ::std::os::raw::c_char,
                                    max_level: ::std::os::raw::c_int)
     -> gpgme_error_t;
    pub fn gpgme_op_trustlist_next(ctx: gpgme_ctx_t,
                                   r_item: *mut gpgme_trust_item_t)
     -> gpgme_error_t;
    pub fn gpgme_op_trustlist_end(ctx: gpgme_ctx_t) -> gpgme_error_t;
    pub fn gpgme_trust_item_ref(item: gpgme_trust_item_t);
    pub fn gpgme_trust_item_unref(item: gpgme_trust_item_t);
    pub fn gpgme_trust_item_release(item: gpgme_trust_item_t);
    pub fn gpgme_trust_item_get_string_attr(item: gpgme_trust_item_t,
                                            what: _gpgme_attr_t,
                                            reserved:
                                                *const ::std::os::raw::c_void,
                                            idx: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_trust_item_get_int_attr(item: gpgme_trust_item_t,
                                         what: _gpgme_attr_t,
                                         reserved:
                                             *const ::std::os::raw::c_void,
                                         idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gpgme_op_getauditlog_start(ctx: gpgme_ctx_t, output: gpgme_data_t,
                                      flags: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_getauditlog(ctx: gpgme_ctx_t, output: gpgme_data_t,
                                flags: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_spawn_start(ctx: gpgme_ctx_t,
                                file: *const ::std::os::raw::c_char,
                                argv: *mut *const ::std::os::raw::c_char,
                                datain: gpgme_data_t, dataout: gpgme_data_t,
                                dataerr: gpgme_data_t,
                                flags: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_spawn(ctx: gpgme_ctx_t,
                          file: *const ::std::os::raw::c_char,
                          argv: *mut *const ::std::os::raw::c_char,
                          datain: gpgme_data_t, dataout: gpgme_data_t,
                          dataerr: gpgme_data_t,
                          flags: ::std::os::raw::c_uint) -> gpgme_error_t;
    pub fn gpgme_op_assuan_transact_start(ctx: gpgme_ctx_t,
                                          command:
                                              *const ::std::os::raw::c_char,
                                          data_cb: gpgme_assuan_data_cb_t,
                                          data_cb_value:
                                              *mut ::std::os::raw::c_void,
                                          inq_cb: gpgme_assuan_inquire_cb_t,
                                          inq_cb_value:
                                              *mut ::std::os::raw::c_void,
                                          stat_cb: gpgme_assuan_status_cb_t,
                                          stat_cb_value:
                                              *mut ::std::os::raw::c_void)
     -> gpgme_error_t;
    pub fn gpgme_op_assuan_transact_ext(ctx: gpgme_ctx_t,
                                        command:
                                            *const ::std::os::raw::c_char,
                                        data_cb: gpgme_assuan_data_cb_t,
                                        data_cb_value:
                                            *mut ::std::os::raw::c_void,
                                        inq_cb: gpgme_assuan_inquire_cb_t,
                                        inq_cb_value:
                                            *mut ::std::os::raw::c_void,
                                        stat_cb: gpgme_assuan_status_cb_t,
                                        stat_cb_value:
                                            *mut ::std::os::raw::c_void,
                                        op_err: *mut gpgme_error_t)
     -> gpgme_error_t;
    pub fn gpgme_op_assuan_result(ctx: gpgme_ctx_t) -> gpgme_assuan_result_t;
    pub fn gpgme_op_assuan_transact(ctx: gpgme_ctx_t,
                                    command: *const ::std::os::raw::c_char,
                                    data_cb: gpgme_assuan_data_cb_t,
                                    data_cb_value:
                                        *mut ::std::os::raw::c_void,
                                    inq_cb: gpgme_assuan_inquire_cb_t,
                                    inq_cb_value: *mut ::std::os::raw::c_void,
                                    status_cb: gpgme_assuan_status_cb_t,
                                    status_cb_value:
                                        *mut ::std::os::raw::c_void)
     -> gpgme_error_t;
    pub fn gpgme_op_vfs_mount_result(ctx: gpgme_ctx_t)
     -> gpgme_vfs_mount_result_t;
    pub fn gpgme_op_vfs_mount(ctx: gpgme_ctx_t,
                              container_file: *const ::std::os::raw::c_char,
                              mount_dir: *const ::std::os::raw::c_char,
                              flags: ::std::os::raw::c_uint,
                              op_err: *mut gpgme_error_t) -> gpgme_error_t;
    pub fn gpgme_op_vfs_create(ctx: gpgme_ctx_t, recp: *mut gpgme_key_t,
                               container_file: *const ::std::os::raw::c_char,
                               flags: ::std::os::raw::c_uint,
                               op_err: *mut gpgme_error_t) -> gpgme_error_t;
    pub fn gpgme_conf_arg_new(arg_p: *mut gpgme_conf_arg_t,
                              type_: gpgme_conf_type_t,
                              value: *const ::std::os::raw::c_void)
     -> gpgme_error_t;
    pub fn gpgme_conf_arg_release(arg: gpgme_conf_arg_t,
                                  type_: gpgme_conf_type_t);
    pub fn gpgme_conf_opt_change(opt: gpgme_conf_opt_t,
                                 reset: ::std::os::raw::c_int,
                                 arg: gpgme_conf_arg_t) -> gpgme_error_t;
    pub fn gpgme_conf_release(conf: gpgme_conf_comp_t);
    pub fn gpgme_op_conf_load(ctx: gpgme_ctx_t,
                              conf_p: *mut gpgme_conf_comp_t)
     -> gpgme_error_t;
    pub fn gpgme_op_conf_save(ctx: gpgme_ctx_t, comp: gpgme_conf_comp_t)
     -> gpgme_error_t;
    pub fn gpgme_op_query_swdb(ctx: gpgme_ctx_t,
                               name: *const ::std::os::raw::c_char,
                               iversion: *const ::std::os::raw::c_char,
                               reserved: ::std::os::raw::c_uint)
     -> gpgme_error_t;
    pub fn gpgme_op_query_swdb_result(ctx: gpgme_ctx_t)
     -> gpgme_query_swdb_result_t;
    pub fn gpgme_set_global_flag(name: *const ::std::os::raw::c_char,
                                 value: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn gpgme_check_version(req_version: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_check_version_internal(req_version:
                                            *const ::std::os::raw::c_char,
                                        offset_sig_validity: size_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_get_dirinfo(what: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_get_engine_info(engine_info: *mut gpgme_engine_info_t)
     -> gpgme_error_t;
    pub fn gpgme_set_engine_info(proto: gpgme_protocol_t,
                                 file_name: *const ::std::os::raw::c_char,
                                 home_dir: *const ::std::os::raw::c_char)
     -> gpgme_error_t;
    pub fn gpgme_engine_check_version(proto: gpgme_protocol_t)
     -> gpgme_error_t;
    pub fn gpgme_result_ref(result: *mut ::std::os::raw::c_void);
    pub fn gpgme_result_unref(result: *mut ::std::os::raw::c_void);
    pub fn gpgme_pubkey_algo_string(subkey: gpgme_subkey_t)
     -> *mut ::std::os::raw::c_char;
    pub fn gpgme_pubkey_algo_name(algo: gpgme_pubkey_algo_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_hash_algo_name(algo: gpgme_hash_algo_t)
     -> *const ::std::os::raw::c_char;
    pub fn gpgme_addrspec_from_uid(uid: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
